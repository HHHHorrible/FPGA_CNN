-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Pool,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=3503,HLS_SYN_LUT=4481}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5BB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "01011011101100011010001010111100";
    constant ap_const_lv32_DBB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "11011011101100011010001010111100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal mode_V_read_reg_832 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state39 : BOOLEAN;
    signal Ky_V_read_reg_838 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_843 : STD_LOGIC_VECTOR (7 downto 0);
    signal Win_V_read_reg_848 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V_read_reg_854 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_860 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_out3_reg_865 : STD_LOGIC_VECTOR (29 downto 0);
    signal feature_in1_reg_870 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_fu_375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_reg_875 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_reg_882 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_395_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_reg_889 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_8_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_7_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_reg_911 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_reg_916 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal next_mul2_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_470_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_reg_969 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul3_fu_476_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul3_reg_974 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_fu_490_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_982 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_out4_sum_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out4_sum_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal next_mul_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_1002 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal j_fu_528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1010 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_1018 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal r_V3_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V3_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal jj_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal feature_in2_sum_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in2_sum5_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum5_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum6_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum6_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_block_state32_io : BOOLEAN;
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_24_reg_1075 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_feature_in_loa_fu_727_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal feature_in_load_1_su_fu_818_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal op_assign_reg_179 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul2_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_s_reg_214 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond4_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul9_reg_225 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_1_reg_237 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal phi_mul_reg_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_2_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_be_phi_fu_308_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal i_op_assign_3_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_be_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_5_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_CS_fsm_state50 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_395_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_433_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_13_cast4_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_502_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_502_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_545_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_1_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_12_fu_580_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_to_int6_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_2_to_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_648_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_658_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_666_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_676_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_to_int_fu_735_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_1_to_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_739_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_749_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_757_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_767_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_379_ap_start : STD_LOGIC;
    signal grp_fu_379_ap_done : STD_LOGIC;
    signal grp_fu_389_ap_start : STD_LOGIC;
    signal grp_fu_389_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_379_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_389_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component Pool_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fdiv_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_sitofp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fcmp_32ns_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Pool_udiv_16ns_8nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mul_32s_16nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Pool_AXILiteS_s_axi_U : component Pool_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        mode_V => mode_V,
        feature_in => feature_in,
        feature_out => feature_out);

    Pool_gmem_m_axi_U : component Pool_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => feature_out4_sum_reg_992,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => tmp_5_reg_921,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => sum_5_reg_320,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Pool_fadd_32ns_32bkb_U0 : component Pool_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_3_reg_281,
        din1 => reg_349,
        ce => ap_const_logic_1,
        dout => grp_fu_331_p2);

    Pool_fdiv_32ns_32cud_U1 : component Pool_fdiv_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_op_assign_reg_260,
        din1 => tmp_3_reg_946,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    Pool_sitofp_32ns_dEe_U2 : component Pool_sitofp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_341_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p1);

    Pool_fcmp_32ns_32eOg_U3 : component Pool_fcmp_32ns_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_281,
        din1 => reg_349,
        opcode => ap_const_lv5_2,
        dout => grp_fu_344_p2);

    Pool_udiv_16ns_8nfYi_U4 : component Pool_udiv_16ns_8nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_379_ap_start,
        done => grp_fu_379_ap_done,
        din0 => Win_V,
        din1 => grp_fu_379_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_379_p2);

    Pool_udiv_16ns_8nfYi_U5 : component Pool_udiv_16ns_8nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_389_ap_start,
        done => grp_fu_389_ap_done,
        din0 => Hin_V,
        din1 => grp_fu_389_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);

    Pool_mul_32s_16nsg8j_U6 : component Pool_mul_32s_16nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_502_p0,
        din1 => grp_fu_502_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_502_p2);

    Pool_mul_32s_16nsg8j_U7 : component Pool_mul_32s_16nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V3_reg_1023,
        din1 => grp_fu_565_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_2) and not((ap_const_boolean_1 = ap_block_state32_io))) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_1) and not((ap_const_boolean_1 = ap_block_state32_io))) or ((ap_const_lv1_1 = ap_CS_fsm_state42) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_2) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state42) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state25)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state71)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then 
                i_op_assign_1_reg_237 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state71) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY)))) then 
                i_op_assign_1_reg_237 <= j_reg_1010;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond_fu_523_p2))) then 
                i_op_assign_2_reg_270 <= ap_const_lv8_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state31) and not((ap_const_lv1_0 = exitcond3_fu_569_p2)))) then 
                i_op_assign_2_reg_270 <= ii_reg_1018;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state55)) then 
                i_op_assign_3_reg_293 <= jj_reg_1038;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state30)) then 
                i_op_assign_3_reg_293 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond_fu_523_p2))) then 
                i_op_assign_reg_260 <= p_sum_reg_951;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state31) and not((ap_const_lv1_0 = exitcond3_fu_569_p2)))) then 
                i_op_assign_reg_260 <= sum_3_reg_281;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond4_fu_465_p2))) then 
                i_op_assign_s_reg_214 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state75) and not((ap_const_logic_0 = gmem_BVALID)))) then 
                i_op_assign_s_reg_214 <= i_reg_982;
            end if; 
        end if;
    end process;

    op_assign_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22) and not((exitcond1_fu_485_p2 = ap_const_lv1_0)))) then 
                op_assign_reg_179 <= c_reg_969;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state20)) then 
                op_assign_reg_179 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22) and not((exitcond1_fu_485_p2 = ap_const_lv1_0)))) then 
                phi_mul1_reg_190 <= next_mul2_reg_961;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state20)) then 
                phi_mul1_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22) and not((exitcond1_fu_485_p2 = ap_const_lv1_0)))) then 
                phi_mul2_reg_202 <= next_mul1_reg_956;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state20)) then 
                phi_mul2_reg_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul9_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond4_fu_465_p2))) then 
                phi_mul9_reg_225 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state75) and not((ap_const_logic_0 = gmem_BVALID)))) then 
                phi_mul9_reg_225 <= next_mul3_reg_974;
            end if; 
        end if;
    end process;

    phi_mul_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then 
                phi_mul_reg_248 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state71) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY)))) then 
                phi_mul_reg_248 <= next_mul_reg_1002;
            end if; 
        end if;
    end process;

    sum_3_be_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_832 = ap_const_lv2_2) and (ap_const_lv1_1 = ap_CS_fsm_state41))) then 
                sum_3_be_reg_304 <= sum_3_feature_in_loa_fu_727_p3;
            elsif (((mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state41))) then 
                sum_3_be_reg_304 <= feature_in_load_1_su_fu_818_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond3_fu_569_p2) and (mode_V_read_reg_832 = ap_const_lv2_3))) then 
                sum_3_be_reg_304 <= sum_3_reg_281;
            elsif (((mode_V_read_reg_832 = ap_const_lv2_0) and (ap_const_lv1_1 = ap_CS_fsm_state55))) then 
                sum_3_be_reg_304 <= sum_2_reg_1096;
            end if; 
        end if;
    end process;

    sum_3_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state55)) then 
                sum_3_reg_281 <= sum_3_be_phi_fu_308_p8;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state30)) then 
                sum_3_reg_281 <= i_op_assign_reg_260;
            end if; 
        end if;
    end process;

    sum_5_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27) and (tmp_2_reg_932 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond2_fu_534_p2)))) then 
                sum_5_reg_320 <= i_op_assign_reg_260;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state70)) then 
                sum_5_reg_320 <= grp_fu_336_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_logic_0 = ap_start)))) then
                CHin_V_read_reg_860 <= CHin_V;
                Hin_V_read_reg_854 <= Hin_V;
                Kx_V_read_reg_843 <= Kx_V;
                Ky_V_read_reg_838 <= Ky_V;
                Win_V_read_reg_848 <= Win_V;
                feature_in1_reg_870 <= feature_in(31 downto 2);
                feature_out3_reg_865 <= feature_out(31 downto 2);
                    lhs_V_reg_875(7 downto 0) <= lhs_V_fu_375_p1(7 downto 0);
                mode_V_read_reg_832 <= mode_V;
                    rhs_V_reg_882(7 downto 0) <= rhs_V_fu_385_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state21)) then
                c_reg_969 <= c_fu_470_p2;
                next_mul1_reg_956 <= next_mul1_fu_455_p2;
                next_mul2_reg_961 <= next_mul2_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond3_fu_569_p2))) then
                feature_in2_sum5_reg_1048 <= feature_in2_sum5_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond3_fu_569_p2) and (mode_V_read_reg_832 = ap_const_lv2_0))) then
                feature_in2_sum6_reg_1053 <= feature_in2_sum6_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_832 = ap_const_lv2_2) and (ap_const_lv1_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond3_fu_569_p2))) then
                feature_in2_sum_reg_1043 <= feature_in2_sum_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state24)) then
                feature_out4_sum_reg_992 <= feature_out4_sum_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state22)) then
                i_reg_982 <= i_fu_490_p2;
                next_mul3_reg_974 <= next_mul3_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state27)) then
                ii_reg_1018 <= ii_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state26)) then
                j_reg_1010 <= j_fu_528_p2;
                next_mul_reg_1002 <= next_mul_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state31)) then
                jj_reg_1038 <= jj_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state20)) then
                    p_sum_reg_951(5 downto 2) <= p_sum_fu_447_p3(5 downto 2);    p_sum_reg_951(7) <= p_sum_fu_447_p3(7);    p_sum_reg_951(9) <= p_sum_fu_447_p3(9);    p_sum_reg_951(13) <= p_sum_fu_447_p3(13);    p_sum_reg_951(16 downto 15) <= p_sum_fu_447_p3(16 downto 15);    p_sum_reg_951(21 downto 20) <= p_sum_fu_447_p3(21 downto 20);    p_sum_reg_951(25 downto 23) <= p_sum_fu_447_p3(25 downto 23);    p_sum_reg_951(28 downto 27) <= p_sum_fu_447_p3(28 downto 27);    p_sum_reg_951(31 downto 30) <= p_sum_fu_447_p3(31 downto 30);
                r_V_1_reg_916 <= grp_fu_389_p2;
                r_V_reg_911 <= grp_fu_379_p2;
                    rhs_V_1_reg_941(15 downto 0) <= rhs_V_1_fu_425_p1(15 downto 0);
                    tmp_1_reg_936(15 downto 0) <= tmp_1_fu_422_p1(15 downto 0);
                tmp_2_reg_932 <= tmp_2_fu_417_p2;
                tmp_3_reg_946 <= grp_fu_341_p1;
                    tmp_5_reg_921(15 downto 0) <= tmp_5_fu_409_p1(15 downto 0);
                    tmp_6_reg_927(15 downto 0) <= tmp_6_fu_413_p1(15 downto 0);
                    tmp_7_reg_904(29 downto 0) <= tmp_7_fu_406_p1(29 downto 0);
                    tmp_8_reg_899(29 downto 0) <= tmp_8_fu_403_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond2_fu_534_p2))) then
                r_V3_reg_1023 <= r_V3_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state14)) then
                r_V_2_reg_889 <= r_V_2_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state39) and (mode_V_read_reg_832 = ap_const_lv2_2) and not((ap_const_boolean_1 = ap_block_state39))) or ((mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state39) and not((ap_const_boolean_1 = ap_block_state39))) or ((ap_const_lv1_1 = ap_CS_fsm_state49) and not((ap_const_logic_0 = gmem_RVALID))))) then
                reg_349 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state54)) then
                sum_2_reg_1096 <= grp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state30)) then
                tmp_11_reg_1028 <= grp_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state40))) then
                tmp_24_reg_1075 <= grp_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_832 = ap_const_lv2_2) and (ap_const_lv1_1 = ap_CS_fsm_state40))) then
                tmp_35_reg_1070 <= grp_fu_344_p2;
            end if;
        end if;
    end process;
    lhs_V_reg_875(15 downto 8) <= "00000000";
    rhs_V_reg_882(15 downto 8) <= "00000000";
    tmp_8_reg_899(31 downto 30) <= "00";
    tmp_7_reg_904(31 downto 30) <= "00";
    tmp_5_reg_921(31 downto 16) <= "0000000000000000";
    tmp_6_reg_927(31 downto 16) <= "0000000000000000";
    tmp_1_reg_936(31 downto 16) <= "0000000000000000";
    rhs_V_1_reg_941(31 downto 16) <= "0000000000000000";
    p_sum_reg_951(1 downto 0) <= "00";
    p_sum_reg_951(6 downto 6) <= "0";
    p_sum_reg_951(8 downto 8) <= "0";
    p_sum_reg_951(12 downto 10) <= "000";
    p_sum_reg_951(14 downto 14) <= "0";
    p_sum_reg_951(19 downto 17) <= "000";
    p_sum_reg_951(22 downto 22) <= "0";
    p_sum_reg_951(26 downto 26) <= "0";
    p_sum_reg_951(29) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, mode_V_read_reg_832, gmem_RVALID, gmem_BVALID, ap_block_state39, tmp_2_reg_932, exitcond1_fu_485_p2, ap_sig_ioackin_gmem_AWREADY, exitcond2_fu_534_p2, exitcond3_fu_569_p2, ap_sig_ioackin_gmem_ARREADY, ap_block_state32_io, exitcond4_fu_465_p2, ap_sig_ioackin_gmem_WREADY, exitcond_fu_523_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_const_logic_0 = ap_start))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_465_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (not((exitcond1_fu_485_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if ((ap_const_lv1_0 = exitcond_fu_523_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state27 => 
                if (((tmp_2_reg_932 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond2_fu_534_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                elsif ((not((ap_const_lv1_0 = exitcond2_fu_534_p2)) and not((tmp_2_reg_932 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_569_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif (((ap_const_lv1_0 = exitcond3_fu_569_p2) and (mode_V_read_reg_832 = ap_const_lv2_3))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                elsif (((ap_const_lv1_0 = exitcond3_fu_569_p2) and (mode_V_read_reg_832 = ap_const_lv2_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if ((not((ap_const_boolean_1 = ap_block_state32_io)) and ((mode_V_read_reg_832 = ap_const_lv2_1) or (mode_V_read_reg_832 = ap_const_lv2_2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if ((not((ap_const_boolean_1 = ap_block_state39)) and ((mode_V_read_reg_832 = ap_const_lv2_1) or (mode_V_read_reg_832 = ap_const_lv2_2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state42 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (not((ap_const_logic_0 = gmem_RVALID))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (not((ap_const_logic_0 = gmem_BVALID))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state39 <= ap_CS_fsm(38 downto 38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39 downto 39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40 downto 40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41 downto 41);
    ap_CS_fsm_state49 <= ap_CS_fsm(48 downto 48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49 downto 49);
    ap_CS_fsm_state54 <= ap_CS_fsm(53 downto 53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54 downto 54);
    ap_CS_fsm_state70 <= ap_CS_fsm(69 downto 69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70 downto 70);
    ap_CS_fsm_state75 <= ap_CS_fsm(74 downto 74);

    ap_block_state32_io_assign_proc : process(mode_V_read_reg_832, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state32_io <= (((mode_V_read_reg_832 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)));
    end process;


    ap_block_state39_assign_proc : process(mode_V_read_reg_832, gmem_RVALID)
    begin
                ap_block_state39 <= (((mode_V_read_reg_832 = ap_const_lv2_2) and (ap_const_logic_0 = gmem_RVALID)) or ((mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_logic_0 = gmem_RVALID)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state21, exitcond4_fu_465_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = exitcond4_fu_465_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, exitcond4_fu_465_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = exitcond4_fu_465_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_fu_470_p2 <= std_logic_vector(unsigned(op_assign_reg_179) + unsigned(ap_const_lv16_1));
    exitcond1_fu_485_p2 <= "1" when (i_op_assign_s_reg_214 = r_V_reg_911) else "0";
    exitcond2_fu_534_p2 <= "1" when (i_op_assign_2_reg_270 = Kx_V_read_reg_843) else "0";
    exitcond3_fu_569_p2 <= "1" when (i_op_assign_3_reg_293 = Ky_V_read_reg_838) else "0";
    exitcond4_fu_465_p2 <= "1" when (op_assign_reg_179 = CHin_V_read_reg_860) else "0";
    exitcond_fu_523_p2 <= "1" when (i_op_assign_1_reg_237 = r_V_1_reg_916) else "0";
    feature_in2_sum5_fu_613_p2 <= std_logic_vector(unsigned(tmp_16_fu_608_p2) + unsigned(tmp_7_reg_904));
    feature_in2_sum6_fu_627_p2 <= std_logic_vector(unsigned(tmp_7_reg_904) + unsigned(tmp_14_fu_622_p2));
    feature_in2_sum_fu_599_p2 <= std_logic_vector(unsigned(tmp_27_fu_594_p2) + unsigned(tmp_7_reg_904));
    feature_in_load_1_su_fu_818_p3 <= 
        reg_349 when (tmp_25_fu_813_p2(0) = '1') else 
        sum_3_reg_281;
    feature_in_load_1_to_fu_753_p1 <= reg_349;
    feature_in_load_2_to_fu_662_p1 <= reg_349;
    feature_out4_sum_fu_507_p2 <= std_logic_vector(unsigned(tmp_8_reg_899) + unsigned(grp_fu_502_p2));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state32, mode_V_read_reg_832, feature_in2_sum_reg_1043, feature_in2_sum5_reg_1048, feature_in2_sum6_reg_1053, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_state42)) then 
                gmem_ARADDR <= feature_in2_sum6_reg_1053;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_1))) then 
                gmem_ARADDR <= feature_in2_sum5_reg_1048;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_2))) then 
                gmem_ARADDR <= feature_in2_sum_reg_1043;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state32, mode_V_read_reg_832, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state42) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state25, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state25) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state75, gmem_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state75) and not((ap_const_logic_0 = gmem_BVALID)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state49, mode_V_read_reg_832, ap_CS_fsm_state39, gmem_RVALID, ap_block_state39)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state39) and (mode_V_read_reg_832 = ap_const_lv2_2) and not((ap_const_boolean_1 = ap_block_state39))) or ((mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state39) and not((ap_const_boolean_1 = ap_block_state39))) or ((ap_const_lv1_1 = ap_CS_fsm_state49) and not((ap_const_logic_0 = gmem_RVALID))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state71, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state71) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state42, ap_CS_fsm_state32, mode_V_read_reg_832)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state42) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state32) and (mode_V_read_reg_832 = ap_const_lv2_2)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state25)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_state25)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state75)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_state75)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state49, mode_V_read_reg_832, ap_CS_fsm_state39)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49) or ((mode_V_read_reg_832 = ap_const_lv2_1) and (ap_const_lv1_1 = ap_CS_fsm_state39)) or ((ap_const_lv1_1 = ap_CS_fsm_state39) and (mode_V_read_reg_832 = ap_const_lv2_2)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state71)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_state71)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_341_p0 <= std_logic_vector(resize(unsigned(r_V_2_reg_889),32));

    grp_fu_379_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_logic_0 = ap_start)))) then 
            grp_fu_379_ap_start <= ap_const_logic_1;
        else 
            grp_fu_379_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_379_p1 <= grp_fu_379_p10(8 - 1 downto 0);
    grp_fu_379_p10 <= std_logic_vector(resize(unsigned(Kx_V),16));

    grp_fu_389_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_logic_0 = ap_start)))) then 
            grp_fu_389_ap_start <= ap_const_logic_1;
        else 
            grp_fu_389_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_389_p1 <= grp_fu_389_p10(8 - 1 downto 0);
    grp_fu_389_p10 <= std_logic_vector(resize(unsigned(Ky_V),16));
    grp_fu_502_p0 <= std_logic_vector(unsigned(i_op_assign_13_cast4_fu_481_p1) + unsigned(phi_mul1_reg_190));
    grp_fu_502_p1 <= tmp_5_reg_921(16 - 1 downto 0);
    grp_fu_565_p1 <= rhs_V_1_reg_941(16 - 1 downto 0);
    h_V_fu_584_p2 <= std_logic_vector(unsigned(phi_mul_reg_248) + unsigned(tmp_12_fu_580_p1));
    i_fu_490_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_214) + unsigned(ap_const_lv16_1));
    i_op_assign_13_cast4_fu_481_p1 <= std_logic_vector(resize(unsigned(i_op_assign_s_reg_214),32));
    ii_fu_539_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_270) + unsigned(ap_const_lv8_1));
    j_fu_528_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_237) + unsigned(ap_const_lv16_1));
    jj_fu_574_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_293) + unsigned(ap_const_lv8_1));
        lhs_V_1_fu_555_p1 <= std_logic_vector(resize(signed(w_V_fu_549_p2),32));

    lhs_V_fu_375_p1 <= std_logic_vector(resize(unsigned(Kx_V),16));
    next_mul1_fu_455_p2 <= std_logic_vector(unsigned(phi_mul2_reg_202) + unsigned(tmp_1_reg_936));
    next_mul2_fu_460_p2 <= std_logic_vector(unsigned(phi_mul1_reg_190) + unsigned(tmp_6_reg_927));
    next_mul3_fu_476_p2 <= std_logic_vector(unsigned(phi_mul9_reg_225) + unsigned(rhs_V_reg_882));
    next_mul_fu_518_p2 <= std_logic_vector(unsigned(phi_mul_reg_248) + unsigned(lhs_V_reg_875));
    notlhs1_fu_789_p2 <= "0" when (tmp_19_fu_757_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_698_p2 <= "0" when (tmp_30_fu_666_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_771_p2 <= "0" when (tmp_17_fu_739_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_680_p2 <= "0" when (tmp_28_fu_648_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_777_p2 <= "1" when (tmp_18_fu_749_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_795_p2 <= "1" when (tmp_20_fu_767_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_704_p2 <= "1" when (tmp_31_fu_676_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_686_p2 <= "1" when (tmp_29_fu_658_p1 = ap_const_lv23_0) else "0";
    p_sum_fu_447_p3 <= 
        sum_fu_433_p3 when (tmp_9_fu_441_p2(0) = '1') else 
        ap_const_lv32_DBB1A2BC;
    r_V3_fu_559_p2 <= std_logic_vector(unsigned(phi_mul2_reg_202) + unsigned(lhs_V_1_fu_555_p1));
    r_V_2_fu_395_p0 <= lhs_V_reg_875(8 - 1 downto 0);
    r_V_2_fu_395_p1 <= rhs_V_reg_882(8 - 1 downto 0);
    r_V_2_fu_395_p2 <= std_logic_vector(resize(unsigned(r_V_2_fu_395_p0) * unsigned(r_V_2_fu_395_p1), 16));
    rhs_V_1_fu_425_p1 <= std_logic_vector(resize(unsigned(Hin_V_read_reg_854),32));
    rhs_V_fu_385_p1 <= std_logic_vector(resize(unsigned(Ky_V),16));

    sum_3_be_phi_fu_308_p8_assign_proc : process(mode_V_read_reg_832, sum_2_reg_1096, ap_CS_fsm_state55, sum_3_be_reg_304)
    begin
        if (((mode_V_read_reg_832 = ap_const_lv2_0) and (ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            sum_3_be_phi_fu_308_p8 <= sum_2_reg_1096;
        else 
            sum_3_be_phi_fu_308_p8 <= sum_3_be_reg_304;
        end if; 
    end process;

    sum_3_feature_in_loa_fu_727_p3 <= 
        sum_3_reg_281 when (tmp_36_fu_722_p2(0) = '1') else 
        reg_349;
    sum_3_to_int6_fu_644_p1 <= sum_3_reg_281;
    sum_3_to_int_fu_735_p1 <= sum_3_reg_281;
    sum_fu_433_p3 <= 
        ap_const_lv32_0 when (tmp_2_fu_417_p2(0) = '1') else 
        ap_const_lv32_5BB1A2BC;
    tmp_10_fu_545_p1 <= std_logic_vector(resize(unsigned(i_op_assign_2_reg_270),16));
    tmp_12_fu_580_p1 <= std_logic_vector(resize(unsigned(i_op_assign_3_reg_293),16));
        tmp_13_fu_618_p1 <= std_logic_vector(resize(signed(h_V_fu_584_p2),32));

    tmp_14_fu_622_p2 <= std_logic_vector(unsigned(tmp_11_reg_1028) + unsigned(tmp_13_fu_618_p1));
        tmp_15_fu_604_p1 <= std_logic_vector(resize(signed(h_V_fu_584_p2),32));

    tmp_16_fu_608_p2 <= std_logic_vector(unsigned(tmp_11_reg_1028) + unsigned(tmp_15_fu_604_p1));
    tmp_17_fu_739_p4 <= sum_3_to_int_fu_735_p1(30 downto 23);
    tmp_18_fu_749_p1 <= sum_3_to_int_fu_735_p1(23 - 1 downto 0);
    tmp_19_fu_757_p4 <= feature_in_load_1_to_fu_753_p1(30 downto 23);
    tmp_1_fu_422_p1 <= std_logic_vector(resize(unsigned(Win_V_read_reg_848),32));
    tmp_20_fu_767_p1 <= feature_in_load_1_to_fu_753_p1(23 - 1 downto 0);
    tmp_21_fu_783_p2 <= (notrhs1_fu_777_p2 or notlhs9_fu_771_p2);
    tmp_22_fu_801_p2 <= (notrhs2_fu_795_p2 or notlhs1_fu_789_p2);
    tmp_23_fu_807_p2 <= (tmp_21_fu_783_p2 and tmp_22_fu_801_p2);
    tmp_25_fu_813_p2 <= (tmp_23_fu_807_p2 and tmp_24_reg_1075);
        tmp_26_fu_590_p1 <= std_logic_vector(resize(signed(h_V_fu_584_p2),32));

    tmp_27_fu_594_p2 <= std_logic_vector(unsigned(tmp_11_reg_1028) + unsigned(tmp_26_fu_590_p1));
    tmp_28_fu_648_p4 <= sum_3_to_int6_fu_644_p1(30 downto 23);
    tmp_29_fu_658_p1 <= sum_3_to_int6_fu_644_p1(23 - 1 downto 0);
    tmp_2_fu_417_p2 <= "1" when (mode_V_read_reg_832 = ap_const_lv2_0) else "0";
    tmp_30_fu_666_p4 <= feature_in_load_2_to_fu_662_p1(30 downto 23);
    tmp_31_fu_676_p1 <= feature_in_load_2_to_fu_662_p1(23 - 1 downto 0);
    tmp_32_fu_692_p2 <= (notrhs_fu_686_p2 or notlhs_fu_680_p2);
    tmp_33_fu_710_p2 <= (notrhs8_fu_704_p2 or notlhs7_fu_698_p2);
    tmp_34_fu_716_p2 <= (tmp_32_fu_692_p2 and tmp_33_fu_710_p2);
    tmp_36_fu_722_p2 <= (tmp_34_fu_716_p2 and tmp_35_reg_1070);
    tmp_4_fu_428_p2 <= "1" when (mode_V_read_reg_832 = ap_const_lv2_1) else "0";
    tmp_5_fu_409_p1 <= std_logic_vector(resize(unsigned(grp_fu_389_p2),32));
    tmp_6_fu_413_p1 <= std_logic_vector(resize(unsigned(grp_fu_379_p2),32));
    tmp_7_fu_406_p1 <= std_logic_vector(resize(unsigned(feature_in1_reg_870),32));
    tmp_8_fu_403_p1 <= std_logic_vector(resize(unsigned(feature_out3_reg_865),32));
    tmp_9_fu_441_p2 <= (tmp_2_fu_417_p2 or tmp_4_fu_428_p2);
    w_V_fu_549_p2 <= std_logic_vector(unsigned(tmp_10_fu_545_p1) + unsigned(phi_mul9_reg_225));
end behav;
