// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=14,HLS_SYN_FF=3183,HLS_SYN_LUT=3632}" *)

module Conv (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [15:0] CHout_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [0:0] mode_V;
wire   [0:0] relu_en_V;
wire   [31:0] feature_in;
wire   [31:0] W;
wire   [31:0] bias;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire   [0:0] ap_CS_fsm_state28;
wire   [0:0] exitcond2_fu_836_p2;
reg    gmem_blk_n_R;
wire   [0:0] ap_CS_fsm_state61;
wire   [0:0] ap_CS_fsm_state36;
wire   [0:0] ap_CS_fsm_state43;
wire   [0:0] ap_CS_fsm_state37;
wire   [0:0] ap_CS_fsm_state44;
reg    gmem_blk_n_AW;
wire   [0:0] ap_CS_fsm_state67;
reg    gmem_blk_n_W;
wire   [0:0] ap_CS_fsm_state68;
reg    gmem_blk_n_B;
wire   [0:0] ap_CS_fsm_state73;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] reg_411;
reg   [0:0] relu_en_V_read_reg_1088;
reg   [7:0] Sy_V_read_reg_1093;
reg   [7:0] Sx_V_read_reg_1099;
reg   [7:0] Ky_V_read_reg_1105;
reg   [7:0] Kx_V_read_reg_1111;
reg   [15:0] CHout_V_read_reg_1118;
reg   [15:0] Win_V_read_reg_1124;
reg   [15:0] CHin_V_read_reg_1129;
reg   [29:0] feature_out7_reg_1135;
reg   [29:0] tmp_1_reg_1140;
reg   [29:0] W3_reg_1145;
reg   [29:0] feature_in1_reg_1150;
wire   [7:0] p_s_fu_573_p3;
reg   [7:0] p_s_reg_1155;
wire   [7:0] p_1_fu_581_p3;
reg   [7:0] p_1_reg_1160;
wire   [16:0] lhs_V_2_cast_fu_601_p1;
reg   [16:0] lhs_V_2_cast_reg_1165;
wire   [16:0] r_V_3_fu_605_p2;
reg   [16:0] r_V_3_reg_1170;
wire   [16:0] lhs_V_4_cast_fu_623_p1;
reg   [16:0] lhs_V_4_cast_reg_1175;
wire   [16:0] r_V_7_fu_627_p2;
reg   [16:0] r_V_7_reg_1180;
wire   [0:0] ap_CS_fsm_state2;
wire   [31:0] tmp_2_fu_683_p1;
reg   [31:0] tmp_2_reg_1205;
wire   [0:0] ap_CS_fsm_state24;
wire   [30:0] tmp_10_cast_fu_686_p1;
reg   [30:0] tmp_10_cast_reg_1210;
wire   [31:0] tmp_5_fu_689_p1;
reg   [31:0] tmp_5_reg_1215;
wire   [31:0] tmp_8_fu_692_p1;
reg   [31:0] tmp_8_reg_1220;
wire   [15:0] Wout_V_fu_699_p2;
reg   [15:0] Wout_V_reg_1225;
wire   [31:0] tmp_4_fu_705_p1;
reg   [31:0] tmp_4_reg_1230;
wire   [15:0] tmp_7_fu_713_p2;
reg   [15:0] tmp_7_reg_1235;
wire   [15:0] tmp_9_fu_719_p1;
reg   [15:0] tmp_9_reg_1240;
wire   [15:0] tmp_s_fu_722_p1;
reg   [15:0] tmp_s_reg_1245;
wire   [31:0] tmp_26_fu_725_p1;
reg   [31:0] tmp_26_reg_1250;
wire   [15:0] tmp_12_fu_728_p1;
reg   [15:0] tmp_12_reg_1256;
wire   [15:0] tmp_16_fu_731_p1;
reg   [15:0] tmp_16_reg_1261;
wire   [31:0] tmp_20_fu_734_p1;
reg   [31:0] tmp_20_reg_1266;
wire   [31:0] rhs_V_fu_737_p1;
reg   [31:0] rhs_V_reg_1271;
wire   [15:0] tmp_21_cast9_fu_740_p1;
reg   [15:0] tmp_21_cast9_reg_1277;
wire   [31:0] i_op_assign_13_cast8_fu_743_p1;
reg   [31:0] i_op_assign_13_cast8_reg_1282;
wire   [0:0] ap_CS_fsm_state25;
wire   [15:0] cout_fu_756_p2;
reg   [15:0] cout_reg_1291;
reg   [31:0] gmem_addr_reg_1296;
wire   [0:0] exitcond5_fu_751_p2;
wire   [15:0] next_mul1_fu_777_p2;
reg   [15:0] next_mul1_reg_1302;
wire   [0:0] ap_CS_fsm_state26;
wire   [15:0] i_fu_791_p2;
reg   [15:0] i_reg_1310;
wire   [15:0] tmp_14_fu_797_p2;
reg   [15:0] tmp_14_reg_1315;
wire   [0:0] exitcond1_fu_786_p2;
wire   [31:0] p_2_fu_1078_p2;
reg   [31:0] p_2_reg_1320;
wire   [15:0] next_mul2_fu_802_p2;
reg   [15:0] next_mul2_reg_1325;
wire   [0:0] ap_CS_fsm_state27;
wire   [31:0] i_op_assign_11_cast6_fu_807_p1;
reg   [31:0] i_op_assign_11_cast6_reg_1330;
wire   [15:0] j_fu_816_p2;
reg   [15:0] j_reg_1338;
wire   [15:0] tmp_18_fu_822_p2;
reg   [15:0] tmp_18_reg_1343;
wire   [0:0] exitcond_fu_811_p2;
wire   [15:0] next_mul_fu_827_p2;
reg   [15:0] next_mul_reg_1348;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state28_io;
wire   [7:0] ii_fu_841_p2;
reg   [7:0] ii_reg_1356;
wire  signed [15:0] h_V_fu_847_p2;
reg   [15:0] h_V_reg_1361;
wire  signed [31:0] tmp_27_fu_1083_p2;
reg  signed [31:0] tmp_27_reg_1366;
wire   [0:0] rev_fu_865_p2;
reg   [0:0] rev_reg_1371;
wire   [7:0] jj_fu_889_p2;
reg   [7:0] jj_reg_1384;
wire   [0:0] ap_CS_fsm_state29;
(* use_dsp48 = "no" *) wire  signed [31:0] tmp_fu_931_p2;
reg  signed [31:0] tmp_reg_1395;
wire   [0:0] exitcond3_fu_884_p2;
wire   [0:0] brmerge_fu_913_p2;
wire   [0:0] tmp_32_fu_926_p2;
wire   [15:0] tmp4_fu_936_p2;
reg   [15:0] tmp4_reg_1400;
wire   [31:0] tmp5_fu_949_p2;
reg   [31:0] tmp5_reg_1405;
wire   [0:0] ap_CS_fsm_state30;
wire   [31:0] grp_fu_942_p2;
reg   [31:0] tmp3_reg_1410;
wire   [0:0] ap_CS_fsm_state32;
wire   [15:0] cin_fu_963_p2;
reg   [15:0] cin_reg_1418;
wire   [0:0] ap_CS_fsm_state33;
wire   [31:0] feature_in2_sum9_fu_974_p2;
reg   [31:0] feature_in2_sum9_reg_1423;
wire   [0:0] exitcond4_fu_958_p2;
wire   [31:0] grp_fu_984_p2;
reg   [31:0] tmp7_reg_1433;
wire   [0:0] ap_CS_fsm_state35;
wire   [31:0] W4_sum_fu_999_p2;
reg   [31:0] W4_sum_reg_1444;
reg   [31:0] gmem_addr_3_read_reg_1455;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] tp_reg_1460;
wire   [0:0] ap_CS_fsm_state48;
wire   [31:0] grp_fu_396_p2;
wire   [0:0] ap_CS_fsm_state53;
wire   [31:0] grp_fu_875_p2;
reg   [31:0] tmp2_reg_1470;
wire   [0:0] ap_CS_fsm_state56;
wire   [31:0] feature_out8_sum_fu_1014_p2;
reg   [31:0] feature_out8_sum_reg_1475;
wire   [0:0] ap_CS_fsm_state57;
reg   [31:0] sum_3_reg_1480;
wire   [0:0] ap_CS_fsm_state66;
wire   [31:0] sum_4_fu_1065_p3;
reg   [31:0] sum_4_reg_1487;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [15:0] i_op_assign_s_reg_245;
reg   [15:0] i_op_assign_9_reg_256;
reg   [15:0] phi_mul1_reg_267;
reg   [15:0] i_op_assign_1_reg_278;
reg   [15:0] phi_mul2_reg_289;
reg   [31:0] sum_reg_300;
reg   [7:0] i_op_assign_2_reg_312;
reg   [15:0] phi_mul_reg_323;
reg   [31:0] sum_1_reg_335;
wire   [0:0] ap_CS_fsm_state54;
reg   [7:0] i_op_assign_3_reg_347;
reg   [31:0] sum_2_reg_358;
reg   [15:0] i_op_assign_reg_369;
reg   [31:0] sum_1_be_reg_380;
wire   [31:0] bias6_sum_cast_fu_767_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
reg   [31:0] grp_fu_396_p0;
reg   [31:0] grp_fu_396_p1;
wire   [0:0] ap_CS_fsm_state49;
wire   [0:0] ap_CS_fsm_state62;
wire   [0:0] ap_CS_fsm_state45;
wire   [8:0] tmp_2_cast_fu_457_p1;
wire   [8:0] r_V_tr_fu_461_p2;
wire   [8:0] p_neg9_fu_475_p2;
wire   [7:0] tmp_3_fu_481_p4;
wire   [0:0] tmp_10_fu_467_p3;
wire   [7:0] tmp_6_fu_501_p2;
wire   [7:0] tmp_11_fu_491_p4;
wire   [8:0] tmp_24_cast_fu_515_p1;
wire   [8:0] r_V_1_tr_fu_519_p2;
wire   [8:0] p_neg_fu_533_p2;
wire   [7:0] tmp_15_fu_539_p4;
wire   [0:0] tmp_13_fu_525_p3;
wire   [7:0] tmp_19_fu_559_p2;
wire   [7:0] tmp_17_fu_549_p4;
wire   [7:0] pad_x_V_fu_507_p3;
wire   [7:0] pad_y_V_fu_565_p3;
wire   [8:0] r_V_2_fu_589_p3;
wire   [16:0] r_V_2_cast_fu_597_p1;
wire   [8:0] r_V_6_fu_611_p3;
wire   [16:0] r_V_6_cast_fu_619_p1;
wire   [17:0] r_V_3_cast_fu_633_p1;
wire   [17:0] rhs_V_2_cast_fu_636_p1;
wire   [17:0] r_V_4_fu_639_p2;
wire  signed [18:0] grp_fu_652_p0;
wire   [8:0] grp_fu_652_p1;
wire   [17:0] r_V_7_cast_fu_658_p1;
wire   [17:0] rhs_V_5_cast_fu_661_p1;
wire   [17:0] r_V_8_fu_664_p2;
wire  signed [18:0] grp_fu_677_p0;
wire   [8:0] grp_fu_677_p1;
wire   [15:0] grp_fu_652_p2;
wire   [15:0] tmp_22_fu_695_p1;
wire   [15:0] grp_fu_677_p2;
wire   [15:0] tmp_24_fu_709_p1;
wire   [30:0] i_op_assign_13_cast8_1_fu_747_p1;
wire   [30:0] bias6_sum_fu_762_p2;
wire   [15:0] i_op_assign_10_cast5_fu_832_p1;
wire  signed [16:0] lhs_V_cast_fu_856_p1;
wire   [0:0] slt_fu_860_p2;
wire  signed [31:0] grp_fu_875_p0;
wire   [15:0] grp_fu_875_p1;
wire   [15:0] i_op_assign_12_cast3_fu_880_p1;
wire   [15:0] w_V_fu_895_p2;
wire   [15:0] tmp_31_fu_900_p2;
wire   [0:0] tmp_37_fu_905_p3;
wire  signed [16:0] lhs_V_1_cast_fu_922_p1;
wire  signed [31:0] lhs_V_1_fu_918_p1;
wire   [15:0] grp_fu_942_p1;
wire   [15:0] tmp5_fu_949_p0;
wire   [15:0] tmp5_fu_949_p1;
wire   [31:0] i_op_assign_cast1_fu_954_p1;
wire   [31:0] tmp_33_fu_969_p2;
wire  signed [31:0] grp_fu_984_p0;
wire   [15:0] grp_fu_984_p1;
wire   [31:0] tmp_35_fu_995_p2;
wire   [31:0] tmp_25_fu_1010_p2;
wire   [31:0] sum_5_to_int_fu_1019_p1;
wire   [7:0] tmp_28_fu_1022_p4;
wire   [22:0] tmp_29_fu_1032_p1;
wire   [0:0] notrhs_fu_1042_p2;
wire   [0:0] notlhs_fu_1036_p2;
wire   [0:0] tmp_30_fu_1048_p2;
wire   [0:0] tmp_34_fu_406_p2;
wire   [0:0] tmp_36_fu_1054_p2;
wire   [0:0] or_cond_fu_1060_p2;
wire   [15:0] p_2_fu_1078_p0;
wire   [15:0] p_2_fu_1078_p1;
wire   [15:0] tmp_27_fu_1083_p0;
reg    grp_fu_652_ap_start;
wire    grp_fu_652_ap_done;
reg    grp_fu_677_ap_start;
wire    grp_fu_677_ap_done;
reg    grp_fu_875_ce;
wire   [0:0] ap_CS_fsm_state55;
reg   [72:0] ap_NS_fsm;
wire   [18:0] grp_fu_652_p10;
wire   [18:0] grp_fu_677_p10;
wire   [31:0] p_2_fu_1078_p00;
wire   [31:0] tmp5_fu_949_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 73'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Conv_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Conv_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .CHout_V(CHout_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .mode_V(mode_V),
    .relu_en_V(relu_en_V),
    .feature_in(feature_in),
    .W(W),
    .bias(bias),
    .feature_out(feature_out)
);

Conv_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Conv_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(feature_out8_sum_reg_1475),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(sum_4_reg_1487),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fadd_32ns_32bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_396_p0),
    .din1(grp_fu_396_p1),
    .ce(1'b1),
    .dout(grp_fu_396_p2)
);

Conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fmul_32ns_32cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_411),
    .din1(gmem_addr_3_read_reg_1455),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

Conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Conv_fcmp_32ns_32dEe_U2(
    .din0(sum_3_reg_1480),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_34_fu_406_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_652_ap_start),
    .done(grp_fu_652_ap_done),
    .din0(grp_fu_652_p0),
    .din1(grp_fu_652_p1),
    .ce(1'b1),
    .dout(grp_fu_652_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_677_ap_start),
    .done(grp_fu_677_ap_done),
    .din0(grp_fu_677_p0),
    .din1(grp_fu_677_p1),
    .ce(1'b1),
    .dout(grp_fu_677_p2)
);

Conv_mul_32s_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_32s_16nsfYi_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_875_p0),
    .din1(grp_fu_875_p1),
    .ce(grp_fu_875_ce),
    .dout(grp_fu_875_p2)
);

Conv_mul_32s_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_32s_16nsfYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_1395),
    .din1(grp_fu_942_p1),
    .ce(1'b1),
    .dout(grp_fu_942_p2)
);

Conv_mul_32s_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_32s_16nsfYi_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_984_p0),
    .din1(grp_fu_984_p1),
    .ce(1'b1),
    .dout(grp_fu_984_p2)
);

Conv_mul_mul_16nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsg8j_U8(
    .din0(p_2_fu_1078_p0),
    .din1(p_2_fu_1078_p1),
    .dout(p_2_fu_1078_p2)
);

Conv_mul_mul_16nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nshbi_U9(
    .din0(tmp_27_fu_1083_p0),
    .din1(h_V_fu_847_p2),
    .dout(tmp_27_fu_1083_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= 73'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'd1 == ap_CS_fsm_state28) & ~(exitcond2_fu_836_p2 == 1'd0) & ~(1'b1 == ap_block_state28_io)) | ((1'd1 == ap_CS_fsm_state36) & ~(1'b0 == ap_sig_ioackin_gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state37) & ~(1'b0 == ap_sig_ioackin_gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'd1 == ap_CS_fsm_state28) & ~(exitcond2_fu_836_p2 == 1'd0) & (1'b1 == gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state36) & (1'b1 == gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state37) & (1'b1 == gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'd1 == ap_CS_fsm_state67)) begin
            if (~(1'b0 == ap_sig_ioackin_gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((1'b1 == gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'd1 == ap_CS_fsm_state68)) begin
            if (~(1'b0 == ap_sig_ioackin_gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((1'b1 == gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state26) & (1'd0 == exitcond1_fu_786_p2))) begin
        i_op_assign_1_reg_278 <= 16'd0;
    end else if (((1'd1 == ap_CS_fsm_state73) & ~(1'b0 == gmem_BVALID))) begin
        i_op_assign_1_reg_278 <= j_reg_1338;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state29) & ~(1'd0 == exitcond3_fu_884_p2))) begin
        i_op_assign_2_reg_312 <= ii_reg_1356;
    end else if (((1'd1 == ap_CS_fsm_state27) & (1'd0 == exitcond_fu_811_p2))) begin
        i_op_assign_2_reg_312 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state54)) begin
        i_op_assign_3_reg_347 <= jj_reg_1384;
    end else if (((1'd1 == ap_CS_fsm_state28) & (exitcond2_fu_836_p2 == 1'd0) & ~(1'b1 == ap_block_state28_io))) begin
        i_op_assign_3_reg_347 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state27) & ~(1'd0 == exitcond_fu_811_p2))) begin
        i_op_assign_9_reg_256 <= i_reg_1310;
    end else if (((1'd1 == ap_CS_fsm_state25) & (1'd0 == exitcond5_fu_751_p2))) begin
        i_op_assign_9_reg_256 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state32)) begin
        i_op_assign_reg_369 <= 16'd0;
    end else if ((1'd1 == ap_CS_fsm_state53)) begin
        i_op_assign_reg_369 <= cin_reg_1418;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state26) & ~(1'd0 == exitcond1_fu_786_p2))) begin
        i_op_assign_s_reg_245 <= cout_reg_1291;
    end else if ((1'd1 == ap_CS_fsm_state24)) begin
        i_op_assign_s_reg_245 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state27) & ~(1'd0 == exitcond_fu_811_p2))) begin
        phi_mul1_reg_267 <= next_mul1_reg_1302;
    end else if (((1'd1 == ap_CS_fsm_state25) & (1'd0 == exitcond5_fu_751_p2))) begin
        phi_mul1_reg_267 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state26) & (1'd0 == exitcond1_fu_786_p2))) begin
        phi_mul2_reg_289 <= 16'd0;
    end else if (((1'd1 == ap_CS_fsm_state73) & ~(1'b0 == gmem_BVALID))) begin
        phi_mul2_reg_289 <= next_mul2_reg_1325;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state29) & ~(1'd0 == exitcond3_fu_884_p2))) begin
        phi_mul_reg_323 <= next_mul_reg_1348;
    end else if (((1'd1 == ap_CS_fsm_state27) & (1'd0 == exitcond_fu_811_p2))) begin
        phi_mul_reg_323 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state33) & ~(1'd0 == exitcond4_fu_958_p2))) begin
        sum_1_be_reg_380 <= sum_2_reg_358;
    end else if ((((1'd1 == ap_CS_fsm_state29) & (1'd0 == exitcond3_fu_884_p2) & ~(1'd0 == brmerge_fu_913_p2)) | ((1'd1 == ap_CS_fsm_state29) & (1'd0 == exitcond3_fu_884_p2) & (1'd0 == brmerge_fu_913_p2) & (1'd0 == tmp_32_fu_926_p2)))) begin
        sum_1_be_reg_380 <= sum_1_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state54)) begin
        sum_1_reg_335 <= sum_1_be_reg_380;
    end else if (((1'd1 == ap_CS_fsm_state28) & (exitcond2_fu_836_p2 == 1'd0) & ~(1'b1 == ap_block_state28_io))) begin
        sum_1_reg_335 <= sum_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state32)) begin
        sum_2_reg_358 <= sum_1_reg_335;
    end else if ((1'd1 == ap_CS_fsm_state53)) begin
        sum_2_reg_358 <= grp_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state29) & ~(1'd0 == exitcond3_fu_884_p2))) begin
        sum_reg_300 <= sum_1_reg_335;
    end else if (((1'd1 == ap_CS_fsm_state27) & (1'd0 == exitcond_fu_811_p2))) begin
        sum_reg_300 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start))) begin
        CHin_V_read_reg_1129 <= CHin_V;
        CHout_V_read_reg_1118 <= CHout_V;
        Kx_V_read_reg_1111 <= Kx_V;
        Ky_V_read_reg_1105 <= Ky_V;
        Sx_V_read_reg_1099 <= Sx_V;
        Sy_V_read_reg_1093 <= Sy_V;
        W3_reg_1145 <= {{W[31:2]}};
        Win_V_read_reg_1124 <= Win_V;
        feature_in1_reg_1150 <= {{feature_in[31:2]}};
        feature_out7_reg_1135 <= {{feature_out[31:2]}};
        lhs_V_2_cast_reg_1165[15 : 0] <= lhs_V_2_cast_fu_601_p1[15 : 0];
        lhs_V_4_cast_reg_1175[15 : 0] <= lhs_V_4_cast_fu_623_p1[15 : 0];
        p_1_reg_1160 <= p_1_fu_581_p3;
        p_s_reg_1155 <= p_s_fu_573_p3;
        r_V_3_reg_1170 <= r_V_3_fu_605_p2;
        r_V_7_reg_1180 <= r_V_7_fu_627_p2;
        relu_en_V_read_reg_1088 <= relu_en_V;
        tmp_1_reg_1140 <= {{bias[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state36) & ~(1'b0 == ap_sig_ioackin_gmem_ARREADY))) begin
        W4_sum_reg_1444 <= W4_sum_fu_999_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state24)) begin
        Wout_V_reg_1225 <= Wout_V_fu_699_p2;
        rhs_V_reg_1271[15 : 0] <= rhs_V_fu_737_p1[15 : 0];
        tmp_10_cast_reg_1210[29 : 0] <= tmp_10_cast_fu_686_p1[29 : 0];
        tmp_12_reg_1256[7 : 0] <= tmp_12_fu_728_p1[7 : 0];
        tmp_16_reg_1261[7 : 0] <= tmp_16_fu_731_p1[7 : 0];
        tmp_20_reg_1266[15 : 0] <= tmp_20_fu_734_p1[15 : 0];
        tmp_21_cast9_reg_1277[7 : 0] <= tmp_21_cast9_fu_740_p1[7 : 0];
        tmp_26_reg_1250[15 : 0] <= tmp_26_fu_725_p1[15 : 0];
        tmp_2_reg_1205[29 : 0] <= tmp_2_fu_683_p1[29 : 0];
        tmp_4_reg_1230[15 : 0] <= tmp_4_fu_705_p1[15 : 0];
        tmp_5_reg_1215[29 : 0] <= tmp_5_fu_689_p1[29 : 0];
        tmp_7_reg_1235 <= tmp_7_fu_713_p2;
        tmp_8_reg_1220[29 : 0] <= tmp_8_fu_692_p1[29 : 0];
        tmp_9_reg_1240[7 : 0] <= tmp_9_fu_719_p1[7 : 0];
        tmp_s_reg_1245[7 : 0] <= tmp_s_fu_722_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state33)) begin
        cin_reg_1418 <= cin_fu_963_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state25)) begin
        cout_reg_1291 <= cout_fu_756_p2;
        i_op_assign_13_cast8_reg_1282[15 : 0] <= i_op_assign_13_cast8_fu_743_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state33) & (1'd0 == exitcond4_fu_958_p2))) begin
        feature_in2_sum9_reg_1423 <= feature_in2_sum9_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state57)) begin
        feature_out8_sum_reg_1475 <= feature_out8_sum_fu_1014_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state44) & ~(1'b0 == gmem_RVALID))) begin
        gmem_addr_3_read_reg_1455 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state25) & (1'd0 == exitcond5_fu_751_p2))) begin
        gmem_addr_reg_1296[30 : 0] <= bias6_sum_cast_fu_767_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state28) & (exitcond2_fu_836_p2 == 1'd0) & ~(1'b1 == ap_block_state28_io))) begin
        h_V_reg_1361 <= h_V_fu_847_p2;
        rev_reg_1371 <= rev_fu_865_p2;
        tmp_27_reg_1366 <= tmp_27_fu_1083_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state27)) begin
        i_op_assign_11_cast6_reg_1330[15 : 0] <= i_op_assign_11_cast6_fu_807_p1[15 : 0];
        j_reg_1338 <= j_fu_816_p2;
        next_mul2_reg_1325 <= next_mul2_fu_802_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state26)) begin
        i_reg_1310 <= i_fu_791_p2;
        next_mul1_reg_1302 <= next_mul1_fu_777_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state28) & ~(1'b1 == ap_block_state28_io))) begin
        ii_reg_1356 <= ii_fu_841_p2;
        next_mul_reg_1348 <= next_mul_fu_827_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state29)) begin
        jj_reg_1384 <= jj_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state26) & (1'd0 == exitcond1_fu_786_p2))) begin
        p_2_reg_1320 <= p_2_fu_1078_p2;
        tmp_14_reg_1315 <= tmp_14_fu_797_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == ap_CS_fsm_state43) & ~(1'b0 == gmem_RVALID)) | ((1'd1 == ap_CS_fsm_state61) & ~(1'b0 == gmem_RVALID)))) begin
        reg_411 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state66)) begin
        sum_3_reg_1480 <= grp_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state67) & ~(1'b0 == ap_sig_ioackin_gmem_AWREADY))) begin
        sum_4_reg_1487 <= sum_4_fu_1065_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state56)) begin
        tmp2_reg_1470 <= grp_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state32)) begin
        tmp3_reg_1410 <= grp_fu_942_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state29) & (1'd0 == exitcond3_fu_884_p2) & (1'd0 == brmerge_fu_913_p2) & ~(1'd0 == tmp_32_fu_926_p2))) begin
        tmp4_reg_1400 <= tmp4_fu_936_p2;
        tmp_reg_1395 <= tmp_fu_931_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state30)) begin
        tmp5_reg_1405 <= tmp5_fu_949_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state35)) begin
        tmp7_reg_1433 <= grp_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state27) & (1'd0 == exitcond_fu_811_p2))) begin
        tmp_18_reg_1343 <= tmp_18_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state48)) begin
        tp_reg_1460 <= grp_fu_402_p2;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state25) & ~(1'd0 == exitcond5_fu_751_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state25) & ~(1'd0 == exitcond5_fu_751_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'd1 == ap_CS_fsm_state37)) begin
            gmem_ARADDR = W4_sum_reg_1444;
        end else if ((1'd1 == ap_CS_fsm_state36)) begin
            gmem_ARADDR = feature_in2_sum9_reg_1423;
        end else if (((1'd1 == ap_CS_fsm_state28) & ~(exitcond2_fu_836_p2 == 1'd0))) begin
            gmem_ARADDR = gmem_addr_reg_1296;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state28) & ~(exitcond2_fu_836_p2 == 1'd0) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state36) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state37) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state67) & (1'b0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state73) & ~(1'b0 == gmem_BVALID))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state43) & ~(1'b0 == gmem_RVALID)) | ((1'd1 == ap_CS_fsm_state61) & ~(1'b0 == gmem_RVALID)) | ((1'd1 == ap_CS_fsm_state44) & ~(1'b0 == gmem_RVALID)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state68) & (1'b0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state28) & ~(exitcond2_fu_836_p2 == 1'd0)) | (1'd1 == ap_CS_fsm_state36) | (1'd1 == ap_CS_fsm_state37))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state67)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state73)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state61) | (1'd1 == ap_CS_fsm_state43) | (1'd1 == ap_CS_fsm_state44))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state68)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state62)) begin
        grp_fu_396_p0 = sum_reg_300;
    end else if ((1'd1 == ap_CS_fsm_state49)) begin
        grp_fu_396_p0 = sum_2_reg_358;
    end else begin
        grp_fu_396_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state62)) begin
        grp_fu_396_p1 = reg_411;
    end else if ((1'd1 == ap_CS_fsm_state49)) begin
        grp_fu_396_p1 = tp_reg_1460;
    end else begin
        grp_fu_396_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state2)) begin
        grp_fu_652_ap_start = 1'b1;
    end else begin
        grp_fu_652_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state2)) begin
        grp_fu_677_ap_start = 1'b1;
    end else begin
        grp_fu_677_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state28) & ~(1'b1 == ap_block_state28_io)) | (1'd1 == ap_CS_fsm_state56) | (1'd1 == ap_CS_fsm_state55))) begin
        grp_fu_875_ce = 1'b1;
    end else begin
        grp_fu_875_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        73'd1 : begin
            if (~(1'b0 == ap_start)) begin
                ap_NS_fsm = 73'd2;
            end else begin
                ap_NS_fsm = 73'd1;
            end
        end
        73'd2 : begin
            ap_NS_fsm = 73'd4;
        end
        73'd4 : begin
            ap_NS_fsm = 73'd8;
        end
        73'd8 : begin
            ap_NS_fsm = 73'd16;
        end
        73'd16 : begin
            ap_NS_fsm = 73'd32;
        end
        73'd32 : begin
            ap_NS_fsm = 73'd64;
        end
        73'd64 : begin
            ap_NS_fsm = 73'd128;
        end
        73'd128 : begin
            ap_NS_fsm = 73'd256;
        end
        73'd256 : begin
            ap_NS_fsm = 73'd512;
        end
        73'd512 : begin
            ap_NS_fsm = 73'd1024;
        end
        73'd1024 : begin
            ap_NS_fsm = 73'd2048;
        end
        73'd2048 : begin
            ap_NS_fsm = 73'd4096;
        end
        73'd4096 : begin
            ap_NS_fsm = 73'd8192;
        end
        73'd8192 : begin
            ap_NS_fsm = 73'd16384;
        end
        73'd16384 : begin
            ap_NS_fsm = 73'd32768;
        end
        73'd32768 : begin
            ap_NS_fsm = 73'd65536;
        end
        73'd65536 : begin
            ap_NS_fsm = 73'd131072;
        end
        73'd131072 : begin
            ap_NS_fsm = 73'd262144;
        end
        73'd262144 : begin
            ap_NS_fsm = 73'd524288;
        end
        73'd524288 : begin
            ap_NS_fsm = 73'd1048576;
        end
        73'd1048576 : begin
            ap_NS_fsm = 73'd2097152;
        end
        73'd2097152 : begin
            ap_NS_fsm = 73'd4194304;
        end
        73'd4194304 : begin
            ap_NS_fsm = 73'd8388608;
        end
        73'd8388608 : begin
            ap_NS_fsm = 73'd16777216;
        end
        73'd16777216 : begin
            if (~(1'd0 == exitcond5_fu_751_p2)) begin
                ap_NS_fsm = 73'd1;
            end else begin
                ap_NS_fsm = 73'd33554432;
            end
        end
        73'd33554432 : begin
            if (~(1'd0 == exitcond1_fu_786_p2)) begin
                ap_NS_fsm = 73'd16777216;
            end else begin
                ap_NS_fsm = 73'd67108864;
            end
        end
        73'd67108864 : begin
            if (~(1'd0 == exitcond_fu_811_p2)) begin
                ap_NS_fsm = 73'd33554432;
            end else begin
                ap_NS_fsm = 73'd134217728;
            end
        end
        73'd134217728 : begin
            if (((exitcond2_fu_836_p2 == 1'd0) & ~(1'b1 == ap_block_state28_io))) begin
                ap_NS_fsm = 73'd268435456;
            end else if ((~(exitcond2_fu_836_p2 == 1'd0) & ~(1'b1 == ap_block_state28_io))) begin
                ap_NS_fsm = 73'd18014398509481984;
            end else begin
                ap_NS_fsm = 73'd134217728;
            end
        end
        73'd268435456 : begin
            if (~(1'd0 == exitcond3_fu_884_p2)) begin
                ap_NS_fsm = 73'd134217728;
            end else if (((1'd0 == exitcond3_fu_884_p2) & (1'd0 == brmerge_fu_913_p2) & ~(1'd0 == tmp_32_fu_926_p2))) begin
                ap_NS_fsm = 73'd536870912;
            end else begin
                ap_NS_fsm = 73'd9007199254740992;
            end
        end
        73'd536870912 : begin
            ap_NS_fsm = 73'd1073741824;
        end
        73'd1073741824 : begin
            ap_NS_fsm = 73'd2147483648;
        end
        73'd2147483648 : begin
            ap_NS_fsm = 73'd4294967296;
        end
        73'd4294967296 : begin
            if (~(1'd0 == exitcond4_fu_958_p2)) begin
                ap_NS_fsm = 73'd9007199254740992;
            end else begin
                ap_NS_fsm = 73'd8589934592;
            end
        end
        73'd8589934592 : begin
            ap_NS_fsm = 73'd17179869184;
        end
        73'd17179869184 : begin
            ap_NS_fsm = 73'd34359738368;
        end
        73'd34359738368 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_ARREADY)) begin
                ap_NS_fsm = 73'd68719476736;
            end else begin
                ap_NS_fsm = 73'd34359738368;
            end
        end
        73'd68719476736 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_ARREADY)) begin
                ap_NS_fsm = 73'd137438953472;
            end else begin
                ap_NS_fsm = 73'd68719476736;
            end
        end
        73'd137438953472 : begin
            ap_NS_fsm = 73'd274877906944;
        end
        73'd274877906944 : begin
            ap_NS_fsm = 73'd549755813888;
        end
        73'd549755813888 : begin
            ap_NS_fsm = 73'd1099511627776;
        end
        73'd1099511627776 : begin
            ap_NS_fsm = 73'd2199023255552;
        end
        73'd2199023255552 : begin
            ap_NS_fsm = 73'd4398046511104;
        end
        73'd4398046511104 : begin
            if (~(1'b0 == gmem_RVALID)) begin
                ap_NS_fsm = 73'd8796093022208;
            end else begin
                ap_NS_fsm = 73'd4398046511104;
            end
        end
        73'd8796093022208 : begin
            if (~(1'b0 == gmem_RVALID)) begin
                ap_NS_fsm = 73'd17592186044416;
            end else begin
                ap_NS_fsm = 73'd8796093022208;
            end
        end
        73'd17592186044416 : begin
            ap_NS_fsm = 73'd35184372088832;
        end
        73'd35184372088832 : begin
            ap_NS_fsm = 73'd70368744177664;
        end
        73'd70368744177664 : begin
            ap_NS_fsm = 73'd140737488355328;
        end
        73'd140737488355328 : begin
            ap_NS_fsm = 73'd281474976710656;
        end
        73'd281474976710656 : begin
            ap_NS_fsm = 73'd562949953421312;
        end
        73'd562949953421312 : begin
            ap_NS_fsm = 73'd1125899906842624;
        end
        73'd1125899906842624 : begin
            ap_NS_fsm = 73'd2251799813685248;
        end
        73'd2251799813685248 : begin
            ap_NS_fsm = 73'd4503599627370496;
        end
        73'd4503599627370496 : begin
            ap_NS_fsm = 73'd4294967296;
        end
        73'd9007199254740992 : begin
            ap_NS_fsm = 73'd268435456;
        end
        73'd18014398509481984 : begin
            ap_NS_fsm = 73'd36028797018963968;
        end
        73'd36028797018963968 : begin
            ap_NS_fsm = 73'd72057594037927936;
        end
        73'd72057594037927936 : begin
            ap_NS_fsm = 73'd144115188075855872;
        end
        73'd144115188075855872 : begin
            ap_NS_fsm = 73'd288230376151711744;
        end
        73'd288230376151711744 : begin
            ap_NS_fsm = 73'd576460752303423488;
        end
        73'd576460752303423488 : begin
            ap_NS_fsm = 73'd1152921504606846976;
        end
        73'd1152921504606846976 : begin
            if (~(1'b0 == gmem_RVALID)) begin
                ap_NS_fsm = 73'd2305843009213693952;
            end else begin
                ap_NS_fsm = 73'd1152921504606846976;
            end
        end
        73'd2305843009213693952 : begin
            ap_NS_fsm = 73'd4611686018427387904;
        end
        73'd4611686018427387904 : begin
            ap_NS_fsm = 73'd9223372036854775808;
        end
        73'd9223372036854775808 : begin
            ap_NS_fsm = 73'd18446744073709551616;
        end
        73'd18446744073709551616 : begin
            ap_NS_fsm = 73'd36893488147419103232;
        end
        73'd36893488147419103232 : begin
            ap_NS_fsm = 73'd73786976294838206464;
        end
        73'd73786976294838206464 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_AWREADY)) begin
                ap_NS_fsm = 73'd147573952589676412928;
            end else begin
                ap_NS_fsm = 73'd73786976294838206464;
            end
        end
        73'd147573952589676412928 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_WREADY)) begin
                ap_NS_fsm = 73'd295147905179352825856;
            end else begin
                ap_NS_fsm = 73'd147573952589676412928;
            end
        end
        73'd295147905179352825856 : begin
            ap_NS_fsm = 73'd590295810358705651712;
        end
        73'd590295810358705651712 : begin
            ap_NS_fsm = 73'd1180591620717411303424;
        end
        73'd1180591620717411303424 : begin
            ap_NS_fsm = 73'd2361183241434822606848;
        end
        73'd2361183241434822606848 : begin
            ap_NS_fsm = 73'd4722366482869645213696;
        end
        73'd4722366482869645213696 : begin
            if (~(1'b0 == gmem_BVALID)) begin
                ap_NS_fsm = 73'd67108864;
            end else begin
                ap_NS_fsm = 73'd4722366482869645213696;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W4_sum_fu_999_p2 = (tmp_5_reg_1215 + tmp_35_fu_995_p2);

assign Wout_V_fu_699_p2 = (16'd1 + tmp_22_fu_695_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

always @ (*) begin
    ap_block_state28_io = (~(exitcond2_fu_836_p2 == 1'd0) & (1'b0 == ap_sig_ioackin_gmem_ARREADY));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias6_sum_cast_fu_767_p1 = bias6_sum_fu_762_p2;

assign bias6_sum_fu_762_p2 = (tmp_10_cast_reg_1210 + i_op_assign_13_cast8_1_fu_747_p1);

assign brmerge_fu_913_p2 = (tmp_37_fu_905_p3 | rev_reg_1371);

assign cin_fu_963_p2 = (i_op_assign_reg_369 + 16'd1);

assign cout_fu_756_p2 = (i_op_assign_s_reg_245 + 16'd1);

assign exitcond1_fu_786_p2 = ((i_op_assign_9_reg_256 == tmp_7_reg_1235) ? 1'b1 : 1'b0);

assign exitcond2_fu_836_p2 = ((i_op_assign_2_reg_312 == Ky_V_read_reg_1105) ? 1'b1 : 1'b0);

assign exitcond3_fu_884_p2 = ((i_op_assign_3_reg_347 == Kx_V_read_reg_1111) ? 1'b1 : 1'b0);

assign exitcond4_fu_958_p2 = ((i_op_assign_reg_369 == CHin_V_read_reg_1129) ? 1'b1 : 1'b0);

assign exitcond5_fu_751_p2 = ((i_op_assign_s_reg_245 == CHout_V_read_reg_1118) ? 1'b1 : 1'b0);

assign exitcond_fu_811_p2 = ((i_op_assign_1_reg_278 == Wout_V_reg_1225) ? 1'b1 : 1'b0);

assign feature_in2_sum9_fu_974_p2 = (tmp_8_reg_1220 + tmp_33_fu_969_p2);

assign feature_out8_sum_fu_1014_p2 = (tmp_25_fu_1010_p2 + tmp_2_reg_1205);

assign grp_fu_652_p0 = $signed(r_V_4_fu_639_p2);

assign grp_fu_652_p1 = grp_fu_652_p10;

assign grp_fu_652_p10 = Sx_V_read_reg_1099;

assign grp_fu_677_p0 = $signed(r_V_8_fu_664_p2);

assign grp_fu_677_p1 = grp_fu_677_p10;

assign grp_fu_677_p10 = Sy_V_read_reg_1093;

assign grp_fu_875_p0 = (p_2_reg_1320 + i_op_assign_11_cast6_reg_1330);

assign grp_fu_875_p1 = tmp_26_reg_1250;

assign grp_fu_942_p1 = rhs_V_reg_1271;

assign grp_fu_984_p0 = (tmp5_reg_1405 + i_op_assign_cast1_fu_954_p1);

assign grp_fu_984_p1 = tmp_26_reg_1250;

assign h_V_fu_847_p2 = (i_op_assign_10_cast5_fu_832_p1 + tmp_14_reg_1315);

assign i_fu_791_p2 = (i_op_assign_9_reg_256 + 16'd1);

assign i_op_assign_10_cast5_fu_832_p1 = i_op_assign_2_reg_312;

assign i_op_assign_11_cast6_fu_807_p1 = i_op_assign_1_reg_278;

assign i_op_assign_12_cast3_fu_880_p1 = i_op_assign_3_reg_347;

assign i_op_assign_13_cast8_1_fu_747_p1 = i_op_assign_s_reg_245;

assign i_op_assign_13_cast8_fu_743_p1 = i_op_assign_s_reg_245;

assign i_op_assign_cast1_fu_954_p1 = i_op_assign_reg_369;

assign ii_fu_841_p2 = (i_op_assign_2_reg_312 + 8'd1);

assign j_fu_816_p2 = (i_op_assign_1_reg_278 + 16'd1);

assign jj_fu_889_p2 = (i_op_assign_3_reg_347 + 8'd1);

assign lhs_V_1_cast_fu_922_p1 = $signed(w_V_fu_895_p2);

assign lhs_V_1_fu_918_p1 = $signed(w_V_fu_895_p2);

assign lhs_V_2_cast_fu_601_p1 = Win_V;

assign lhs_V_4_cast_fu_623_p1 = Hin_V;

assign lhs_V_cast_fu_856_p1 = h_V_fu_847_p2;

assign next_mul1_fu_777_p2 = (phi_mul1_reg_267 + tmp_12_reg_1256);

assign next_mul2_fu_802_p2 = (phi_mul2_reg_289 + tmp_16_reg_1261);

assign next_mul_fu_827_p2 = (phi_mul_reg_323 + tmp_21_cast9_reg_1277);

assign notlhs_fu_1036_p2 = ((tmp_28_fu_1022_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1042_p2 = ((tmp_29_fu_1032_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond_fu_1060_p2 = (tmp_36_fu_1054_p2 & relu_en_V_read_reg_1088);

assign p_1_fu_581_p3 = ((mode_V[0:0] === 1'b1) ? pad_y_V_fu_565_p3 : 8'd0);

assign p_2_fu_1078_p0 = p_2_fu_1078_p00;

assign p_2_fu_1078_p00 = i_op_assign_9_reg_256;

assign p_2_fu_1078_p1 = tmp_4_reg_1230;

assign p_neg9_fu_475_p2 = (9'd1 - tmp_2_cast_fu_457_p1);

assign p_neg_fu_533_p2 = (9'd1 - tmp_24_cast_fu_515_p1);

assign p_s_fu_573_p3 = ((mode_V[0:0] === 1'b1) ? pad_x_V_fu_507_p3 : 8'd0);

assign pad_x_V_fu_507_p3 = ((tmp_10_fu_467_p3[0:0] === 1'b1) ? tmp_6_fu_501_p2 : tmp_11_fu_491_p4);

assign pad_y_V_fu_565_p3 = ((tmp_13_fu_525_p3[0:0] === 1'b1) ? tmp_19_fu_559_p2 : tmp_17_fu_549_p4);

assign r_V_1_tr_fu_519_p2 = ($signed(9'd511) + $signed(tmp_24_cast_fu_515_p1));

assign r_V_2_cast_fu_597_p1 = r_V_2_fu_589_p3;

assign r_V_2_fu_589_p3 = {{p_s_fu_573_p3}, {1'd0}};

assign r_V_3_cast_fu_633_p1 = r_V_3_reg_1170;

assign r_V_3_fu_605_p2 = (lhs_V_2_cast_fu_601_p1 + r_V_2_cast_fu_597_p1);

assign r_V_4_fu_639_p2 = (r_V_3_cast_fu_633_p1 - rhs_V_2_cast_fu_636_p1);

assign r_V_6_cast_fu_619_p1 = r_V_6_fu_611_p3;

assign r_V_6_fu_611_p3 = {{p_1_fu_581_p3}, {1'd0}};

assign r_V_7_cast_fu_658_p1 = r_V_7_reg_1180;

assign r_V_7_fu_627_p2 = (lhs_V_4_cast_fu_623_p1 + r_V_6_cast_fu_619_p1);

assign r_V_8_fu_664_p2 = (r_V_7_cast_fu_658_p1 - rhs_V_5_cast_fu_661_p1);

assign r_V_tr_fu_461_p2 = ($signed(9'd511) + $signed(tmp_2_cast_fu_457_p1));

assign rev_fu_865_p2 = (slt_fu_860_p2 ^ 1'd1);

assign rhs_V_2_cast_fu_636_p1 = Kx_V_read_reg_1111;

assign rhs_V_5_cast_fu_661_p1 = Ky_V_read_reg_1105;

assign rhs_V_fu_737_p1 = CHin_V_read_reg_1129;

assign slt_fu_860_p2 = (($signed(lhs_V_cast_fu_856_p1) < $signed(lhs_V_4_cast_reg_1175)) ? 1'b1 : 1'b0);

assign sum_4_fu_1065_p3 = ((or_cond_fu_1060_p2[0:0] === 1'b1) ? 32'd0 : sum_3_reg_1480);

assign sum_5_to_int_fu_1019_p1 = sum_3_reg_1480;

assign tmp4_fu_936_p2 = (i_op_assign_12_cast3_fu_880_p1 + phi_mul_reg_323);

assign tmp5_fu_949_p0 = tmp5_fu_949_p00;

assign tmp5_fu_949_p00 = tmp4_reg_1400;

assign tmp5_fu_949_p1 = rhs_V_reg_1271;

assign tmp5_fu_949_p2 = (tmp5_fu_949_p0 * tmp5_fu_949_p1);

assign tmp_10_cast_fu_686_p1 = tmp_1_reg_1140;

assign tmp_10_fu_467_p3 = r_V_tr_fu_461_p2[32'd8];

assign tmp_11_fu_491_p4 = {{r_V_tr_fu_461_p2[8:1]}};

assign tmp_12_fu_728_p1 = Sy_V_read_reg_1093;

assign tmp_13_fu_525_p3 = r_V_1_tr_fu_519_p2[32'd8];

assign tmp_14_fu_797_p2 = (phi_mul1_reg_267 - tmp_9_reg_1240);

assign tmp_15_fu_539_p4 = {{p_neg_fu_533_p2[8:1]}};

assign tmp_16_fu_731_p1 = Sx_V_read_reg_1099;

assign tmp_17_fu_549_p4 = {{r_V_1_tr_fu_519_p2[8:1]}};

assign tmp_18_fu_822_p2 = (phi_mul2_reg_289 - tmp_s_reg_1245);

assign tmp_19_fu_559_p2 = (8'd0 - tmp_15_fu_539_p4);

assign tmp_20_fu_734_p1 = Win_V_read_reg_1124;

assign tmp_21_cast9_fu_740_p1 = Kx_V_read_reg_1111;

assign tmp_22_fu_695_p1 = grp_fu_652_p2[15:0];

assign tmp_24_cast_fu_515_p1 = Ky_V;

assign tmp_24_fu_709_p1 = grp_fu_677_p2[15:0];

assign tmp_25_fu_1010_p2 = (tmp2_reg_1470 + i_op_assign_13_cast8_reg_1282);

assign tmp_26_fu_725_p1 = CHout_V_read_reg_1118;

assign tmp_27_fu_1083_p0 = tmp_20_reg_1266;

assign tmp_28_fu_1022_p4 = {{sum_5_to_int_fu_1019_p1[30:23]}};

assign tmp_29_fu_1032_p1 = sum_5_to_int_fu_1019_p1[22:0];

assign tmp_2_cast_fu_457_p1 = Kx_V;

assign tmp_2_fu_683_p1 = feature_out7_reg_1135;

assign tmp_30_fu_1048_p2 = (notrhs_fu_1042_p2 | notlhs_fu_1036_p2);

assign tmp_31_fu_900_p2 = (w_V_fu_895_p2 | h_V_reg_1361);

assign tmp_32_fu_926_p2 = (($signed(lhs_V_1_cast_fu_922_p1) < $signed(lhs_V_2_cast_reg_1165)) ? 1'b1 : 1'b0);

assign tmp_33_fu_969_p2 = (tmp3_reg_1410 + i_op_assign_cast1_fu_954_p1);

assign tmp_35_fu_995_p2 = (tmp7_reg_1433 + i_op_assign_13_cast8_reg_1282);

assign tmp_36_fu_1054_p2 = (tmp_30_fu_1048_p2 & tmp_34_fu_406_p2);

assign tmp_37_fu_905_p3 = tmp_31_fu_900_p2[32'd15];

assign tmp_3_fu_481_p4 = {{p_neg9_fu_475_p2[8:1]}};

assign tmp_4_fu_705_p1 = Wout_V_fu_699_p2;

assign tmp_5_fu_689_p1 = W3_reg_1145;

assign tmp_6_fu_501_p2 = (8'd0 - tmp_3_fu_481_p4);

assign tmp_7_fu_713_p2 = (16'd1 + tmp_24_fu_709_p1);

assign tmp_8_fu_692_p1 = feature_in1_reg_1150;

assign tmp_9_fu_719_p1 = p_1_reg_1160;

assign tmp_fu_931_p2 = ($signed(tmp_27_reg_1366) + $signed(lhs_V_1_fu_918_p1));

assign tmp_s_fu_722_p1 = p_s_reg_1155;

assign w_V_fu_895_p2 = (i_op_assign_12_cast3_fu_880_p1 + tmp_18_reg_1343);

always @ (posedge ap_clk) begin
    lhs_V_2_cast_reg_1165[16] <= 1'b0;
    lhs_V_4_cast_reg_1175[16] <= 1'b0;
    tmp_2_reg_1205[31:30] <= 2'b00;
    tmp_10_cast_reg_1210[30] <= 1'b0;
    tmp_5_reg_1215[31:30] <= 2'b00;
    tmp_8_reg_1220[31:30] <= 2'b00;
    tmp_4_reg_1230[31:16] <= 16'b0000000000000000;
    tmp_9_reg_1240[15:8] <= 8'b00000000;
    tmp_s_reg_1245[15:8] <= 8'b00000000;
    tmp_26_reg_1250[31:16] <= 16'b0000000000000000;
    tmp_12_reg_1256[15:8] <= 8'b00000000;
    tmp_16_reg_1261[15:8] <= 8'b00000000;
    tmp_20_reg_1266[31:16] <= 16'b0000000000000000;
    rhs_V_reg_1271[31:16] <= 16'b0000000000000000;
    tmp_21_cast9_reg_1277[15:8] <= 8'b00000000;
    i_op_assign_13_cast8_reg_1282[31:16] <= 16'b0000000000000000;
    gmem_addr_reg_1296[31] <= 1'b0;
    i_op_assign_11_cast6_reg_1330[31:16] <= 16'b0000000000000000;
end

endmodule //Conv
