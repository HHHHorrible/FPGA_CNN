// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Pool,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=3503,HLS_SYN_LUT=4481}" *)

module Pool (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [1:0] mode_V;
wire   [31:0] feature_in;
wire   [31:0] feature_out;
reg    gmem_blk_n_AW;
wire   [0:0] ap_CS_fsm_state25;
reg    gmem_blk_n_W;
wire   [0:0] ap_CS_fsm_state71;
reg    gmem_blk_n_B;
wire   [0:0] ap_CS_fsm_state75;
reg    gmem_blk_n_AR;
wire   [0:0] ap_CS_fsm_state42;
reg    gmem_blk_n_R;
wire   [0:0] ap_CS_fsm_state49;
wire   [0:0] ap_CS_fsm_state32;
reg   [1:0] mode_V_read_reg_832;
wire   [0:0] ap_CS_fsm_state39;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] reg_349;
reg    ap_block_state39;
reg   [7:0] Ky_V_read_reg_838;
reg   [7:0] Kx_V_read_reg_843;
reg   [15:0] Win_V_read_reg_848;
reg   [15:0] Hin_V_read_reg_854;
reg   [15:0] CHin_V_read_reg_860;
reg   [29:0] feature_out3_reg_865;
reg   [29:0] feature_in1_reg_870;
wire   [15:0] lhs_V_fu_375_p1;
reg   [15:0] lhs_V_reg_875;
wire   [15:0] rhs_V_fu_385_p1;
reg   [15:0] rhs_V_reg_882;
wire   [15:0] r_V_2_fu_395_p2;
reg   [15:0] r_V_2_reg_889;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state15;
wire   [31:0] tmp_8_fu_403_p1;
reg   [31:0] tmp_8_reg_899;
wire   [0:0] ap_CS_fsm_state20;
wire   [31:0] tmp_7_fu_406_p1;
reg   [31:0] tmp_7_reg_904;
wire   [15:0] grp_fu_379_p2;
reg   [15:0] r_V_reg_911;
wire   [15:0] grp_fu_389_p2;
reg   [15:0] r_V_1_reg_916;
wire   [31:0] tmp_5_fu_409_p1;
reg   [31:0] tmp_5_reg_921;
wire   [31:0] tmp_6_fu_413_p1;
reg   [31:0] tmp_6_reg_927;
wire   [0:0] tmp_2_fu_417_p2;
reg   [0:0] tmp_2_reg_932;
wire   [31:0] tmp_1_fu_422_p1;
reg   [31:0] tmp_1_reg_936;
wire   [31:0] rhs_V_1_fu_425_p1;
reg   [31:0] rhs_V_1_reg_941;
wire   [31:0] grp_fu_341_p1;
reg   [31:0] tmp_3_reg_946;
wire   [31:0] p_sum_fu_447_p3;
reg   [31:0] p_sum_reg_951;
wire   [31:0] next_mul1_fu_455_p2;
reg   [31:0] next_mul1_reg_956;
wire   [0:0] ap_CS_fsm_state21;
wire   [31:0] next_mul2_fu_460_p2;
reg   [31:0] next_mul2_reg_961;
wire   [15:0] c_fu_470_p2;
reg   [15:0] c_reg_969;
wire   [15:0] next_mul3_fu_476_p2;
reg   [15:0] next_mul3_reg_974;
wire   [0:0] ap_CS_fsm_state22;
wire   [15:0] i_fu_490_p2;
reg   [15:0] i_reg_982;
wire   [0:0] exitcond1_fu_485_p2;
wire   [31:0] feature_out4_sum_fu_507_p2;
reg   [31:0] feature_out4_sum_reg_992;
wire   [0:0] ap_CS_fsm_state24;
reg    ap_sig_ioackin_gmem_AWREADY;
wire   [15:0] next_mul_fu_518_p2;
reg   [15:0] next_mul_reg_1002;
wire   [0:0] ap_CS_fsm_state26;
wire   [15:0] j_fu_528_p2;
reg   [15:0] j_reg_1010;
wire   [7:0] ii_fu_539_p2;
reg   [7:0] ii_reg_1018;
wire   [0:0] ap_CS_fsm_state27;
wire  signed [31:0] r_V3_fu_559_p2;
reg  signed [31:0] r_V3_reg_1023;
wire   [0:0] exitcond2_fu_534_p2;
wire   [31:0] grp_fu_565_p2;
reg   [31:0] tmp_11_reg_1028;
wire   [0:0] ap_CS_fsm_state30;
wire   [7:0] jj_fu_574_p2;
reg   [7:0] jj_reg_1038;
wire   [0:0] ap_CS_fsm_state31;
wire   [31:0] feature_in2_sum_fu_599_p2;
reg   [31:0] feature_in2_sum_reg_1043;
wire   [0:0] exitcond3_fu_569_p2;
wire   [31:0] feature_in2_sum5_fu_613_p2;
reg   [31:0] feature_in2_sum5_reg_1048;
wire   [31:0] feature_in2_sum6_fu_627_p2;
reg   [31:0] feature_in2_sum6_reg_1053;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state32_io;
wire   [0:0] grp_fu_344_p2;
reg   [0:0] tmp_35_reg_1070;
wire   [0:0] ap_CS_fsm_state40;
reg   [0:0] tmp_24_reg_1075;
wire   [31:0] sum_3_feature_in_loa_fu_727_p3;
wire   [0:0] ap_CS_fsm_state41;
wire   [31:0] feature_in_load_1_su_fu_818_p3;
wire   [31:0] grp_fu_331_p2;
reg   [31:0] sum_2_reg_1096;
wire   [0:0] ap_CS_fsm_state54;
wire   [31:0] grp_fu_336_p2;
wire   [0:0] ap_CS_fsm_state70;
reg   [15:0] op_assign_reg_179;
reg   [31:0] phi_mul1_reg_190;
reg   [31:0] phi_mul2_reg_202;
reg   [15:0] i_op_assign_s_reg_214;
wire   [0:0] exitcond4_fu_465_p2;
reg   [15:0] phi_mul9_reg_225;
reg   [15:0] i_op_assign_1_reg_237;
reg    ap_sig_ioackin_gmem_WREADY;
reg   [15:0] phi_mul_reg_248;
reg   [31:0] i_op_assign_reg_260;
wire   [0:0] exitcond_fu_523_p2;
reg   [7:0] i_op_assign_2_reg_270;
reg   [31:0] sum_3_reg_281;
reg   [31:0] sum_3_be_phi_fu_308_p8;
wire   [0:0] ap_CS_fsm_state55;
reg   [7:0] i_op_assign_3_reg_293;
reg   [31:0] sum_3_be_reg_304;
reg   [31:0] sum_5_reg_320;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_WREADY;
wire   [0:0] ap_CS_fsm_state50;
wire   [31:0] grp_fu_341_p0;
wire   [7:0] grp_fu_379_p1;
wire   [7:0] grp_fu_389_p1;
wire   [7:0] r_V_2_fu_395_p0;
wire   [7:0] r_V_2_fu_395_p1;
wire   [0:0] tmp_4_fu_428_p2;
wire   [0:0] tmp_9_fu_441_p2;
wire   [31:0] sum_fu_433_p3;
wire   [31:0] i_op_assign_13_cast4_fu_481_p1;
wire  signed [31:0] grp_fu_502_p0;
wire   [15:0] grp_fu_502_p1;
wire   [31:0] grp_fu_502_p2;
wire   [15:0] tmp_10_fu_545_p1;
wire   [15:0] w_V_fu_549_p2;
wire  signed [31:0] lhs_V_1_fu_555_p1;
wire   [15:0] grp_fu_565_p1;
wire   [0:0] ap_CS_fsm_state28;
wire   [15:0] tmp_12_fu_580_p1;
wire   [15:0] h_V_fu_584_p2;
wire  signed [31:0] tmp_26_fu_590_p1;
wire   [31:0] tmp_27_fu_594_p2;
wire  signed [31:0] tmp_15_fu_604_p1;
wire   [31:0] tmp_16_fu_608_p2;
wire  signed [31:0] tmp_13_fu_618_p1;
wire   [31:0] tmp_14_fu_622_p2;
wire   [31:0] sum_3_to_int6_fu_644_p1;
wire   [31:0] feature_in_load_2_to_fu_662_p1;
wire   [7:0] tmp_28_fu_648_p4;
wire   [22:0] tmp_29_fu_658_p1;
wire   [0:0] notrhs_fu_686_p2;
wire   [0:0] notlhs_fu_680_p2;
wire   [7:0] tmp_30_fu_666_p4;
wire   [22:0] tmp_31_fu_676_p1;
wire   [0:0] notrhs8_fu_704_p2;
wire   [0:0] notlhs7_fu_698_p2;
wire   [0:0] tmp_32_fu_692_p2;
wire   [0:0] tmp_33_fu_710_p2;
wire   [0:0] tmp_34_fu_716_p2;
wire   [0:0] tmp_36_fu_722_p2;
wire   [31:0] sum_3_to_int_fu_735_p1;
wire   [31:0] feature_in_load_1_to_fu_753_p1;
wire   [7:0] tmp_17_fu_739_p4;
wire   [22:0] tmp_18_fu_749_p1;
wire   [0:0] notrhs1_fu_777_p2;
wire   [0:0] notlhs9_fu_771_p2;
wire   [7:0] tmp_19_fu_757_p4;
wire   [22:0] tmp_20_fu_767_p1;
wire   [0:0] notrhs2_fu_795_p2;
wire   [0:0] notlhs1_fu_789_p2;
wire   [0:0] tmp_21_fu_783_p2;
wire   [0:0] tmp_22_fu_801_p2;
wire   [0:0] tmp_23_fu_807_p2;
wire   [0:0] tmp_25_fu_813_p2;
reg    grp_fu_379_ap_start;
wire    grp_fu_379_ap_done;
reg    grp_fu_389_ap_start;
wire    grp_fu_389_ap_done;
reg   [74:0] ap_NS_fsm;
wire   [15:0] grp_fu_379_p10;
wire   [15:0] grp_fu_389_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'd1;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Pool_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Pool_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .mode_V(mode_V),
    .feature_in(feature_in),
    .feature_out(feature_out)
);

Pool_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Pool_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(feature_out4_sum_reg_992),
    .I_AWID(1'd0),
    .I_AWLEN(tmp_5_reg_921),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(sum_5_reg_320),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Pool_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_fadd_32ns_32bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_3_reg_281),
    .din1(reg_349),
    .ce(1'b1),
    .dout(grp_fu_331_p2)
);

Pool_fdiv_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_fdiv_32ns_32cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_op_assign_reg_260),
    .din1(tmp_3_reg_946),
    .ce(1'b1),
    .dout(grp_fu_336_p2)
);

Pool_sitofp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_sitofp_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_341_p0),
    .ce(1'b1),
    .dout(grp_fu_341_p1)
);

Pool_fcmp_32ns_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Pool_fcmp_32ns_32eOg_U3(
    .din0(sum_3_reg_281),
    .din1(reg_349),
    .opcode(5'd2),
    .dout(grp_fu_344_p2)
);

Pool_udiv_16ns_8nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Pool_udiv_16ns_8nfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_379_ap_start),
    .done(grp_fu_379_ap_done),
    .din0(Win_V),
    .din1(grp_fu_379_p1),
    .ce(1'b1),
    .dout(grp_fu_379_p2)
);

Pool_udiv_16ns_8nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Pool_udiv_16ns_8nfYi_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_389_ap_start),
    .done(grp_fu_389_ap_done),
    .din0(Hin_V),
    .din1(grp_fu_389_p1),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

Pool_mul_32s_16nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_32s_16nsg8j_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_502_p0),
    .din1(grp_fu_502_p1),
    .ce(1'b1),
    .dout(grp_fu_502_p2)
);

Pool_mul_32s_16nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_32s_16nsg8j_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V3_reg_1023),
    .din1(grp_fu_565_p1),
    .ce(1'b1),
    .dout(grp_fu_565_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= 75'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd2) & ~(1'b1 == ap_block_state32_io)) | ((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd1) & ~(1'b1 == ap_block_state32_io)) | ((1'd1 == ap_CS_fsm_state42) & ~(1'b0 == ap_sig_ioackin_gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd2) & (1'b1 == gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd1) & (1'b1 == gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state42) & (1'b1 == gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'd1 == ap_CS_fsm_state25)) begin
            if (~(1'b0 == ap_sig_ioackin_gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((1'b1 == gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'd1 == ap_CS_fsm_state71)) begin
            if (~(1'b0 == ap_sig_ioackin_gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((1'b1 == gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state25) & ~(1'b0 == ap_sig_ioackin_gmem_AWREADY))) begin
        i_op_assign_1_reg_237 <= 16'd0;
    end else if (((1'd1 == ap_CS_fsm_state71) & ~(1'b0 == ap_sig_ioackin_gmem_WREADY))) begin
        i_op_assign_1_reg_237 <= j_reg_1010;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state26) & (1'd0 == exitcond_fu_523_p2))) begin
        i_op_assign_2_reg_270 <= 8'd0;
    end else if (((1'd1 == ap_CS_fsm_state31) & ~(1'd0 == exitcond3_fu_569_p2))) begin
        i_op_assign_2_reg_270 <= ii_reg_1018;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state55)) begin
        i_op_assign_3_reg_293 <= jj_reg_1038;
    end else if ((1'd1 == ap_CS_fsm_state30)) begin
        i_op_assign_3_reg_293 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state26) & (1'd0 == exitcond_fu_523_p2))) begin
        i_op_assign_reg_260 <= p_sum_reg_951;
    end else if (((1'd1 == ap_CS_fsm_state31) & ~(1'd0 == exitcond3_fu_569_p2))) begin
        i_op_assign_reg_260 <= sum_3_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state21) & (1'd0 == exitcond4_fu_465_p2))) begin
        i_op_assign_s_reg_214 <= 16'd0;
    end else if (((1'd1 == ap_CS_fsm_state75) & ~(1'b0 == gmem_BVALID))) begin
        i_op_assign_s_reg_214 <= i_reg_982;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state22) & ~(exitcond1_fu_485_p2 == 1'd0))) begin
        op_assign_reg_179 <= c_reg_969;
    end else if ((1'd1 == ap_CS_fsm_state20)) begin
        op_assign_reg_179 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state22) & ~(exitcond1_fu_485_p2 == 1'd0))) begin
        phi_mul1_reg_190 <= next_mul2_reg_961;
    end else if ((1'd1 == ap_CS_fsm_state20)) begin
        phi_mul1_reg_190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state22) & ~(exitcond1_fu_485_p2 == 1'd0))) begin
        phi_mul2_reg_202 <= next_mul1_reg_956;
    end else if ((1'd1 == ap_CS_fsm_state20)) begin
        phi_mul2_reg_202 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state21) & (1'd0 == exitcond4_fu_465_p2))) begin
        phi_mul9_reg_225 <= 16'd0;
    end else if (((1'd1 == ap_CS_fsm_state75) & ~(1'b0 == gmem_BVALID))) begin
        phi_mul9_reg_225 <= next_mul3_reg_974;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state25) & ~(1'b0 == ap_sig_ioackin_gmem_AWREADY))) begin
        phi_mul_reg_248 <= 16'd0;
    end else if (((1'd1 == ap_CS_fsm_state71) & ~(1'b0 == ap_sig_ioackin_gmem_WREADY))) begin
        phi_mul_reg_248 <= next_mul_reg_1002;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_832 == 2'd2) & (1'd1 == ap_CS_fsm_state41))) begin
        sum_3_be_reg_304 <= sum_3_feature_in_loa_fu_727_p3;
    end else if (((mode_V_read_reg_832 == 2'd1) & (1'd1 == ap_CS_fsm_state41))) begin
        sum_3_be_reg_304 <= feature_in_load_1_su_fu_818_p3;
    end else if (((1'd1 == ap_CS_fsm_state31) & (1'd0 == exitcond3_fu_569_p2) & (mode_V_read_reg_832 == 2'd3))) begin
        sum_3_be_reg_304 <= sum_3_reg_281;
    end else if (((mode_V_read_reg_832 == 2'd0) & (1'd1 == ap_CS_fsm_state55))) begin
        sum_3_be_reg_304 <= sum_2_reg_1096;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state55)) begin
        sum_3_reg_281 <= sum_3_be_phi_fu_308_p8;
    end else if ((1'd1 == ap_CS_fsm_state30)) begin
        sum_3_reg_281 <= i_op_assign_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state27) & (tmp_2_reg_932 == 1'd0) & ~(1'd0 == exitcond2_fu_534_p2))) begin
        sum_5_reg_320 <= i_op_assign_reg_260;
    end else if ((1'd1 == ap_CS_fsm_state70)) begin
        sum_5_reg_320 <= grp_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start))) begin
        CHin_V_read_reg_860 <= CHin_V;
        Hin_V_read_reg_854 <= Hin_V;
        Kx_V_read_reg_843 <= Kx_V;
        Ky_V_read_reg_838 <= Ky_V;
        Win_V_read_reg_848 <= Win_V;
        feature_in1_reg_870 <= {{feature_in[31:2]}};
        feature_out3_reg_865 <= {{feature_out[31:2]}};
        lhs_V_reg_875[7 : 0] <= lhs_V_fu_375_p1[7 : 0];
        mode_V_read_reg_832 <= mode_V;
        rhs_V_reg_882[7 : 0] <= rhs_V_fu_385_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state21)) begin
        c_reg_969 <= c_fu_470_p2;
        next_mul1_reg_956 <= next_mul1_fu_455_p2;
        next_mul2_reg_961 <= next_mul2_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_832 == 2'd1) & (1'd1 == ap_CS_fsm_state31) & (1'd0 == exitcond3_fu_569_p2))) begin
        feature_in2_sum5_reg_1048 <= feature_in2_sum5_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state31) & (1'd0 == exitcond3_fu_569_p2) & (mode_V_read_reg_832 == 2'd0))) begin
        feature_in2_sum6_reg_1053 <= feature_in2_sum6_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_832 == 2'd2) & (1'd1 == ap_CS_fsm_state31) & (1'd0 == exitcond3_fu_569_p2))) begin
        feature_in2_sum_reg_1043 <= feature_in2_sum_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state24)) begin
        feature_out4_sum_reg_992 <= feature_out4_sum_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state22)) begin
        i_reg_982 <= i_fu_490_p2;
        next_mul3_reg_974 <= next_mul3_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state27)) begin
        ii_reg_1018 <= ii_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state26)) begin
        j_reg_1010 <= j_fu_528_p2;
        next_mul_reg_1002 <= next_mul_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state31)) begin
        jj_reg_1038 <= jj_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state20)) begin
        p_sum_reg_951[5 : 2] <= p_sum_fu_447_p3[5 : 2];
p_sum_reg_951[7] <= p_sum_fu_447_p3[7];
p_sum_reg_951[9] <= p_sum_fu_447_p3[9];
p_sum_reg_951[13] <= p_sum_fu_447_p3[13];
p_sum_reg_951[16 : 15] <= p_sum_fu_447_p3[16 : 15];
p_sum_reg_951[21 : 20] <= p_sum_fu_447_p3[21 : 20];
p_sum_reg_951[25 : 23] <= p_sum_fu_447_p3[25 : 23];
p_sum_reg_951[28 : 27] <= p_sum_fu_447_p3[28 : 27];
p_sum_reg_951[31 : 30] <= p_sum_fu_447_p3[31 : 30];
        r_V_1_reg_916 <= grp_fu_389_p2;
        r_V_reg_911 <= grp_fu_379_p2;
        rhs_V_1_reg_941[15 : 0] <= rhs_V_1_fu_425_p1[15 : 0];
        tmp_1_reg_936[15 : 0] <= tmp_1_fu_422_p1[15 : 0];
        tmp_2_reg_932 <= tmp_2_fu_417_p2;
        tmp_3_reg_946 <= grp_fu_341_p1;
        tmp_5_reg_921[15 : 0] <= tmp_5_fu_409_p1[15 : 0];
        tmp_6_reg_927[15 : 0] <= tmp_6_fu_413_p1[15 : 0];
        tmp_7_reg_904[29 : 0] <= tmp_7_fu_406_p1[29 : 0];
        tmp_8_reg_899[29 : 0] <= tmp_8_fu_403_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state27) & (1'd0 == exitcond2_fu_534_p2))) begin
        r_V3_reg_1023 <= r_V3_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state14)) begin
        r_V_2_reg_889 <= r_V_2_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == ap_CS_fsm_state39) & (mode_V_read_reg_832 == 2'd2) & ~(1'b1 == ap_block_state39)) | ((mode_V_read_reg_832 == 2'd1) & (1'd1 == ap_CS_fsm_state39) & ~(1'b1 == ap_block_state39)) | ((1'd1 == ap_CS_fsm_state49) & ~(1'b0 == gmem_RVALID)))) begin
        reg_349 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state54)) begin
        sum_2_reg_1096 <= grp_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state30)) begin
        tmp_11_reg_1028 <= grp_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_832 == 2'd1) & (1'd1 == ap_CS_fsm_state40))) begin
        tmp_24_reg_1075 <= grp_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_V_read_reg_832 == 2'd2) & (1'd1 == ap_CS_fsm_state40))) begin
        tmp_35_reg_1070 <= grp_fu_344_p2;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state21) & ~(1'd0 == exitcond4_fu_465_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state21) & ~(1'd0 == exitcond4_fu_465_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'd1 == ap_CS_fsm_state42)) begin
            gmem_ARADDR = feature_in2_sum6_reg_1053;
        end else if (((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd1))) begin
            gmem_ARADDR = feature_in2_sum5_reg_1048;
        end else if (((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd2))) begin
            gmem_ARADDR = feature_in2_sum_reg_1043;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd2) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd1) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state42) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state25) & (1'b0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state75) & ~(1'b0 == gmem_BVALID))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state39) & (mode_V_read_reg_832 == 2'd2) & ~(1'b1 == ap_block_state39)) | ((mode_V_read_reg_832 == 2'd1) & (1'd1 == ap_CS_fsm_state39) & ~(1'b1 == ap_block_state39)) | ((1'd1 == ap_CS_fsm_state49) & ~(1'b0 == gmem_RVALID)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state71) & (1'b0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state42) | ((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd1)) | ((1'd1 == ap_CS_fsm_state32) & (mode_V_read_reg_832 == 2'd2)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state25)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state75)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state49) | ((mode_V_read_reg_832 == 2'd1) & (1'd1 == ap_CS_fsm_state39)) | ((1'd1 == ap_CS_fsm_state39) & (mode_V_read_reg_832 == 2'd2)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state71)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start))) begin
        grp_fu_379_ap_start = 1'b1;
    end else begin
        grp_fu_379_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start))) begin
        grp_fu_389_ap_start = 1'b1;
    end else begin
        grp_fu_389_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((mode_V_read_reg_832 == 2'd0) & (1'd1 == ap_CS_fsm_state55))) begin
        sum_3_be_phi_fu_308_p8 = sum_2_reg_1096;
    end else begin
        sum_3_be_phi_fu_308_p8 = sum_3_be_reg_304;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        75'd1 : begin
            if (~(1'b0 == ap_start)) begin
                ap_NS_fsm = 75'd2;
            end else begin
                ap_NS_fsm = 75'd1;
            end
        end
        75'd2 : begin
            ap_NS_fsm = 75'd4;
        end
        75'd4 : begin
            ap_NS_fsm = 75'd8;
        end
        75'd8 : begin
            ap_NS_fsm = 75'd16;
        end
        75'd16 : begin
            ap_NS_fsm = 75'd32;
        end
        75'd32 : begin
            ap_NS_fsm = 75'd64;
        end
        75'd64 : begin
            ap_NS_fsm = 75'd128;
        end
        75'd128 : begin
            ap_NS_fsm = 75'd256;
        end
        75'd256 : begin
            ap_NS_fsm = 75'd512;
        end
        75'd512 : begin
            ap_NS_fsm = 75'd1024;
        end
        75'd1024 : begin
            ap_NS_fsm = 75'd2048;
        end
        75'd2048 : begin
            ap_NS_fsm = 75'd4096;
        end
        75'd4096 : begin
            ap_NS_fsm = 75'd8192;
        end
        75'd8192 : begin
            ap_NS_fsm = 75'd16384;
        end
        75'd16384 : begin
            ap_NS_fsm = 75'd32768;
        end
        75'd32768 : begin
            ap_NS_fsm = 75'd65536;
        end
        75'd65536 : begin
            ap_NS_fsm = 75'd131072;
        end
        75'd131072 : begin
            ap_NS_fsm = 75'd262144;
        end
        75'd262144 : begin
            ap_NS_fsm = 75'd524288;
        end
        75'd524288 : begin
            ap_NS_fsm = 75'd1048576;
        end
        75'd1048576 : begin
            if (~(1'd0 == exitcond4_fu_465_p2)) begin
                ap_NS_fsm = 75'd1;
            end else begin
                ap_NS_fsm = 75'd2097152;
            end
        end
        75'd2097152 : begin
            if (~(exitcond1_fu_485_p2 == 1'd0)) begin
                ap_NS_fsm = 75'd1048576;
            end else begin
                ap_NS_fsm = 75'd4194304;
            end
        end
        75'd4194304 : begin
            ap_NS_fsm = 75'd8388608;
        end
        75'd8388608 : begin
            ap_NS_fsm = 75'd16777216;
        end
        75'd16777216 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_AWREADY)) begin
                ap_NS_fsm = 75'd33554432;
            end else begin
                ap_NS_fsm = 75'd16777216;
            end
        end
        75'd33554432 : begin
            if ((1'd0 == exitcond_fu_523_p2)) begin
                ap_NS_fsm = 75'd67108864;
            end else begin
                ap_NS_fsm = 75'd2361183241434822606848;
            end
        end
        75'd67108864 : begin
            if (((tmp_2_reg_932 == 1'd0) & ~(1'd0 == exitcond2_fu_534_p2))) begin
                ap_NS_fsm = 75'd1180591620717411303424;
            end else if ((~(1'd0 == exitcond2_fu_534_p2) & ~(tmp_2_reg_932 == 1'd0))) begin
                ap_NS_fsm = 75'd36028797018963968;
            end else begin
                ap_NS_fsm = 75'd134217728;
            end
        end
        75'd134217728 : begin
            ap_NS_fsm = 75'd268435456;
        end
        75'd268435456 : begin
            ap_NS_fsm = 75'd536870912;
        end
        75'd536870912 : begin
            ap_NS_fsm = 75'd1073741824;
        end
        75'd1073741824 : begin
            if (~(1'd0 == exitcond3_fu_569_p2)) begin
                ap_NS_fsm = 75'd67108864;
            end else if (((1'd0 == exitcond3_fu_569_p2) & (mode_V_read_reg_832 == 2'd3))) begin
                ap_NS_fsm = 75'd18014398509481984;
            end else if (((1'd0 == exitcond3_fu_569_p2) & (mode_V_read_reg_832 == 2'd0))) begin
                ap_NS_fsm = 75'd2199023255552;
            end else begin
                ap_NS_fsm = 75'd2147483648;
            end
        end
        75'd2147483648 : begin
            if ((~(1'b1 == ap_block_state32_io) & ((mode_V_read_reg_832 == 2'd1) | (mode_V_read_reg_832 == 2'd2)))) begin
                ap_NS_fsm = 75'd4294967296;
            end else begin
                ap_NS_fsm = 75'd2147483648;
            end
        end
        75'd4294967296 : begin
            ap_NS_fsm = 75'd8589934592;
        end
        75'd8589934592 : begin
            ap_NS_fsm = 75'd17179869184;
        end
        75'd17179869184 : begin
            ap_NS_fsm = 75'd34359738368;
        end
        75'd34359738368 : begin
            ap_NS_fsm = 75'd68719476736;
        end
        75'd68719476736 : begin
            ap_NS_fsm = 75'd137438953472;
        end
        75'd137438953472 : begin
            ap_NS_fsm = 75'd274877906944;
        end
        75'd274877906944 : begin
            if ((~(1'b1 == ap_block_state39) & ((mode_V_read_reg_832 == 2'd1) | (mode_V_read_reg_832 == 2'd2)))) begin
                ap_NS_fsm = 75'd549755813888;
            end else begin
                ap_NS_fsm = 75'd274877906944;
            end
        end
        75'd549755813888 : begin
            ap_NS_fsm = 75'd1099511627776;
        end
        75'd1099511627776 : begin
            ap_NS_fsm = 75'd18014398509481984;
        end
        75'd2199023255552 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_ARREADY)) begin
                ap_NS_fsm = 75'd4398046511104;
            end else begin
                ap_NS_fsm = 75'd2199023255552;
            end
        end
        75'd4398046511104 : begin
            ap_NS_fsm = 75'd8796093022208;
        end
        75'd8796093022208 : begin
            ap_NS_fsm = 75'd17592186044416;
        end
        75'd17592186044416 : begin
            ap_NS_fsm = 75'd35184372088832;
        end
        75'd35184372088832 : begin
            ap_NS_fsm = 75'd70368744177664;
        end
        75'd70368744177664 : begin
            ap_NS_fsm = 75'd140737488355328;
        end
        75'd140737488355328 : begin
            ap_NS_fsm = 75'd281474976710656;
        end
        75'd281474976710656 : begin
            if (~(1'b0 == gmem_RVALID)) begin
                ap_NS_fsm = 75'd562949953421312;
            end else begin
                ap_NS_fsm = 75'd281474976710656;
            end
        end
        75'd562949953421312 : begin
            ap_NS_fsm = 75'd1125899906842624;
        end
        75'd1125899906842624 : begin
            ap_NS_fsm = 75'd2251799813685248;
        end
        75'd2251799813685248 : begin
            ap_NS_fsm = 75'd4503599627370496;
        end
        75'd4503599627370496 : begin
            ap_NS_fsm = 75'd9007199254740992;
        end
        75'd9007199254740992 : begin
            ap_NS_fsm = 75'd18014398509481984;
        end
        75'd18014398509481984 : begin
            ap_NS_fsm = 75'd1073741824;
        end
        75'd36028797018963968 : begin
            ap_NS_fsm = 75'd72057594037927936;
        end
        75'd72057594037927936 : begin
            ap_NS_fsm = 75'd144115188075855872;
        end
        75'd144115188075855872 : begin
            ap_NS_fsm = 75'd288230376151711744;
        end
        75'd288230376151711744 : begin
            ap_NS_fsm = 75'd576460752303423488;
        end
        75'd576460752303423488 : begin
            ap_NS_fsm = 75'd1152921504606846976;
        end
        75'd1152921504606846976 : begin
            ap_NS_fsm = 75'd2305843009213693952;
        end
        75'd2305843009213693952 : begin
            ap_NS_fsm = 75'd4611686018427387904;
        end
        75'd4611686018427387904 : begin
            ap_NS_fsm = 75'd9223372036854775808;
        end
        75'd9223372036854775808 : begin
            ap_NS_fsm = 75'd18446744073709551616;
        end
        75'd18446744073709551616 : begin
            ap_NS_fsm = 75'd36893488147419103232;
        end
        75'd36893488147419103232 : begin
            ap_NS_fsm = 75'd73786976294838206464;
        end
        75'd73786976294838206464 : begin
            ap_NS_fsm = 75'd147573952589676412928;
        end
        75'd147573952589676412928 : begin
            ap_NS_fsm = 75'd295147905179352825856;
        end
        75'd295147905179352825856 : begin
            ap_NS_fsm = 75'd590295810358705651712;
        end
        75'd590295810358705651712 : begin
            ap_NS_fsm = 75'd1180591620717411303424;
        end
        75'd1180591620717411303424 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_WREADY)) begin
                ap_NS_fsm = 75'd33554432;
            end else begin
                ap_NS_fsm = 75'd1180591620717411303424;
            end
        end
        75'd2361183241434822606848 : begin
            ap_NS_fsm = 75'd4722366482869645213696;
        end
        75'd4722366482869645213696 : begin
            ap_NS_fsm = 75'd9444732965739290427392;
        end
        75'd9444732965739290427392 : begin
            ap_NS_fsm = 75'd18889465931478580854784;
        end
        75'd18889465931478580854784 : begin
            if (~(1'b0 == gmem_BVALID)) begin
                ap_NS_fsm = 75'd2097152;
            end else begin
                ap_NS_fsm = 75'd18889465931478580854784;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

always @ (*) begin
    ap_block_state32_io = (((mode_V_read_reg_832 == 2'd2) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)) | ((mode_V_read_reg_832 == 2'd1) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)));
end

always @ (*) begin
    ap_block_state39 = (((mode_V_read_reg_832 == 2'd2) & (1'b0 == gmem_RVALID)) | ((mode_V_read_reg_832 == 2'd1) & (1'b0 == gmem_RVALID)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_fu_470_p2 = (op_assign_reg_179 + 16'd1);

assign exitcond1_fu_485_p2 = ((i_op_assign_s_reg_214 == r_V_reg_911) ? 1'b1 : 1'b0);

assign exitcond2_fu_534_p2 = ((i_op_assign_2_reg_270 == Kx_V_read_reg_843) ? 1'b1 : 1'b0);

assign exitcond3_fu_569_p2 = ((i_op_assign_3_reg_293 == Ky_V_read_reg_838) ? 1'b1 : 1'b0);

assign exitcond4_fu_465_p2 = ((op_assign_reg_179 == CHin_V_read_reg_860) ? 1'b1 : 1'b0);

assign exitcond_fu_523_p2 = ((i_op_assign_1_reg_237 == r_V_1_reg_916) ? 1'b1 : 1'b0);

assign feature_in2_sum5_fu_613_p2 = (tmp_16_fu_608_p2 + tmp_7_reg_904);

assign feature_in2_sum6_fu_627_p2 = (tmp_7_reg_904 + tmp_14_fu_622_p2);

assign feature_in2_sum_fu_599_p2 = (tmp_27_fu_594_p2 + tmp_7_reg_904);

assign feature_in_load_1_su_fu_818_p3 = ((tmp_25_fu_813_p2[0:0] === 1'b1) ? reg_349 : sum_3_reg_281);

assign feature_in_load_1_to_fu_753_p1 = reg_349;

assign feature_in_load_2_to_fu_662_p1 = reg_349;

assign feature_out4_sum_fu_507_p2 = (tmp_8_reg_899 + grp_fu_502_p2);

assign grp_fu_341_p0 = r_V_2_reg_889;

assign grp_fu_379_p1 = grp_fu_379_p10;

assign grp_fu_379_p10 = Kx_V;

assign grp_fu_389_p1 = grp_fu_389_p10;

assign grp_fu_389_p10 = Ky_V;

assign grp_fu_502_p0 = (i_op_assign_13_cast4_fu_481_p1 + phi_mul1_reg_190);

assign grp_fu_502_p1 = tmp_5_reg_921;

assign grp_fu_565_p1 = rhs_V_1_reg_941;

assign h_V_fu_584_p2 = (phi_mul_reg_248 + tmp_12_fu_580_p1);

assign i_fu_490_p2 = (i_op_assign_s_reg_214 + 16'd1);

assign i_op_assign_13_cast4_fu_481_p1 = i_op_assign_s_reg_214;

assign ii_fu_539_p2 = (i_op_assign_2_reg_270 + 8'd1);

assign j_fu_528_p2 = (i_op_assign_1_reg_237 + 16'd1);

assign jj_fu_574_p2 = (i_op_assign_3_reg_293 + 8'd1);

assign lhs_V_1_fu_555_p1 = $signed(w_V_fu_549_p2);

assign lhs_V_fu_375_p1 = Kx_V;

assign next_mul1_fu_455_p2 = (phi_mul2_reg_202 + tmp_1_reg_936);

assign next_mul2_fu_460_p2 = (phi_mul1_reg_190 + tmp_6_reg_927);

assign next_mul3_fu_476_p2 = (phi_mul9_reg_225 + rhs_V_reg_882);

assign next_mul_fu_518_p2 = (phi_mul_reg_248 + lhs_V_reg_875);

assign notlhs1_fu_789_p2 = ((tmp_19_fu_757_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs7_fu_698_p2 = ((tmp_30_fu_666_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs9_fu_771_p2 = ((tmp_17_fu_739_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_680_p2 = ((tmp_28_fu_648_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_777_p2 = ((tmp_18_fu_749_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_795_p2 = ((tmp_20_fu_767_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs8_fu_704_p2 = ((tmp_31_fu_676_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_686_p2 = ((tmp_29_fu_658_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_sum_fu_447_p3 = ((tmp_9_fu_441_p2[0:0] === 1'b1) ? sum_fu_433_p3 : 32'd3685851836);

assign r_V3_fu_559_p2 = ($signed(phi_mul2_reg_202) + $signed(lhs_V_1_fu_555_p1));

assign r_V_2_fu_395_p0 = lhs_V_reg_875;

assign r_V_2_fu_395_p1 = rhs_V_reg_882;

assign r_V_2_fu_395_p2 = (r_V_2_fu_395_p0 * r_V_2_fu_395_p1);

assign rhs_V_1_fu_425_p1 = Hin_V_read_reg_854;

assign rhs_V_fu_385_p1 = Ky_V;

assign sum_3_feature_in_loa_fu_727_p3 = ((tmp_36_fu_722_p2[0:0] === 1'b1) ? sum_3_reg_281 : reg_349);

assign sum_3_to_int6_fu_644_p1 = sum_3_reg_281;

assign sum_3_to_int_fu_735_p1 = sum_3_reg_281;

assign sum_fu_433_p3 = ((tmp_2_fu_417_p2[0:0] === 1'b1) ? 32'd0 : 32'd1538368188);

assign tmp_10_fu_545_p1 = i_op_assign_2_reg_270;

assign tmp_12_fu_580_p1 = i_op_assign_3_reg_293;

assign tmp_13_fu_618_p1 = $signed(h_V_fu_584_p2);

assign tmp_14_fu_622_p2 = ($signed(tmp_11_reg_1028) + $signed(tmp_13_fu_618_p1));

assign tmp_15_fu_604_p1 = $signed(h_V_fu_584_p2);

assign tmp_16_fu_608_p2 = ($signed(tmp_11_reg_1028) + $signed(tmp_15_fu_604_p1));

assign tmp_17_fu_739_p4 = {{sum_3_to_int_fu_735_p1[30:23]}};

assign tmp_18_fu_749_p1 = sum_3_to_int_fu_735_p1[22:0];

assign tmp_19_fu_757_p4 = {{feature_in_load_1_to_fu_753_p1[30:23]}};

assign tmp_1_fu_422_p1 = Win_V_read_reg_848;

assign tmp_20_fu_767_p1 = feature_in_load_1_to_fu_753_p1[22:0];

assign tmp_21_fu_783_p2 = (notrhs1_fu_777_p2 | notlhs9_fu_771_p2);

assign tmp_22_fu_801_p2 = (notrhs2_fu_795_p2 | notlhs1_fu_789_p2);

assign tmp_23_fu_807_p2 = (tmp_21_fu_783_p2 & tmp_22_fu_801_p2);

assign tmp_25_fu_813_p2 = (tmp_23_fu_807_p2 & tmp_24_reg_1075);

assign tmp_26_fu_590_p1 = $signed(h_V_fu_584_p2);

assign tmp_27_fu_594_p2 = ($signed(tmp_11_reg_1028) + $signed(tmp_26_fu_590_p1));

assign tmp_28_fu_648_p4 = {{sum_3_to_int6_fu_644_p1[30:23]}};

assign tmp_29_fu_658_p1 = sum_3_to_int6_fu_644_p1[22:0];

assign tmp_2_fu_417_p2 = ((mode_V_read_reg_832 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_30_fu_666_p4 = {{feature_in_load_2_to_fu_662_p1[30:23]}};

assign tmp_31_fu_676_p1 = feature_in_load_2_to_fu_662_p1[22:0];

assign tmp_32_fu_692_p2 = (notrhs_fu_686_p2 | notlhs_fu_680_p2);

assign tmp_33_fu_710_p2 = (notrhs8_fu_704_p2 | notlhs7_fu_698_p2);

assign tmp_34_fu_716_p2 = (tmp_32_fu_692_p2 & tmp_33_fu_710_p2);

assign tmp_36_fu_722_p2 = (tmp_34_fu_716_p2 & tmp_35_reg_1070);

assign tmp_4_fu_428_p2 = ((mode_V_read_reg_832 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_5_fu_409_p1 = grp_fu_389_p2;

assign tmp_6_fu_413_p1 = grp_fu_379_p2;

assign tmp_7_fu_406_p1 = feature_in1_reg_870;

assign tmp_8_fu_403_p1 = feature_out3_reg_865;

assign tmp_9_fu_441_p2 = (tmp_2_fu_417_p2 | tmp_4_fu_428_p2);

assign w_V_fu_549_p2 = (tmp_10_fu_545_p1 + phi_mul9_reg_225);

always @ (posedge ap_clk) begin
    lhs_V_reg_875[15:8] <= 8'b00000000;
    rhs_V_reg_882[15:8] <= 8'b00000000;
    tmp_8_reg_899[31:30] <= 2'b00;
    tmp_7_reg_904[31:30] <= 2'b00;
    tmp_5_reg_921[31:16] <= 16'b0000000000000000;
    tmp_6_reg_927[31:16] <= 16'b0000000000000000;
    tmp_1_reg_936[31:16] <= 16'b0000000000000000;
    rhs_V_1_reg_941[31:16] <= 16'b0000000000000000;
    p_sum_reg_951[1:0] <= 2'b00;
    p_sum_reg_951[6:6] <= 1'b0;
    p_sum_reg_951[8:8] <= 1'b0;
    p_sum_reg_951[12:10] <= 3'b000;
    p_sum_reg_951[14:14] <= 1'b0;
    p_sum_reg_951[19:17] <= 3'b000;
    p_sum_reg_951[22:22] <= 1'b0;
    p_sum_reg_951[26:26] <= 1'b0;
    p_sum_reg_951[29] <= 1'b0;
end

endmodule //Pool
